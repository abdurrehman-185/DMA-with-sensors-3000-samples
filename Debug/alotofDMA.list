
alotofDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005acc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005c7c  08005c7c  00006c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d24  08005d24  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d24  08005d24  00006d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d2c  08005d2c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d30  08005d30  00006d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005d34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a58  2000005c  08005d90  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ab4  08005d90  00007ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fca3  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b7  00000000  00000000  00016d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00018ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7d  00000000  00000000  00019c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a80f  00000000  00000000  0001a6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbf7  00000000  00000000  00044f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b83c  00000000  00000000  00054b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016033f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e0c  00000000  00000000  00160384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00164190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c64 	.word	0x08005c64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005c64 	.word	0x08005c64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    convCompleted = 1;
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	2000195e 	.word	0x2000195e

080005b0 <calculate_and_print_average>:

void calculate_and_print_average(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    resistor = resistorSum /NUM_SAMPLES;
 80005b4:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <calculate_and_print_average+0x88>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a20      	ldr	r2, [pc, #128]	@ (800063c <calculate_and_print_average+0x8c>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	099b      	lsrs	r3, r3, #6
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <calculate_and_print_average+0x90>)
 80005c4:	801a      	strh	r2, [r3, #0]
    pot = potSum /NUM_SAMPLES;
 80005c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <calculate_and_print_average+0x94>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <calculate_and_print_average+0x8c>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	099b      	lsrs	r3, r3, #6
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <calculate_and_print_average+0x98>)
 80005d6:	801a      	strh	r2, [r3, #0]

    sprintf(msg, "Average Resistor: %hu\r\n", resistor);
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <calculate_and_print_average+0x90>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	491b      	ldr	r1, [pc, #108]	@ (800064c <calculate_and_print_average+0x9c>)
 80005e0:	481b      	ldr	r0, [pc, #108]	@ (8000650 <calculate_and_print_average+0xa0>)
 80005e2:	f004 fe9f 	bl	8005324 <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80005e6:	481a      	ldr	r0, [pc, #104]	@ (8000650 <calculate_and_print_average+0xa0>)
 80005e8:	f7ff fe02 	bl	80001f0 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	4916      	ldr	r1, [pc, #88]	@ (8000650 <calculate_and_print_average+0xa0>)
 80005f6:	4817      	ldr	r0, [pc, #92]	@ (8000654 <calculate_and_print_average+0xa4>)
 80005f8:	f004 f936 	bl	8004868 <HAL_UART_Transmit>

    sprintf(msg, "Average POT: %hu\r\n", pot);
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <calculate_and_print_average+0x98>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4915      	ldr	r1, [pc, #84]	@ (8000658 <calculate_and_print_average+0xa8>)
 8000604:	4812      	ldr	r0, [pc, #72]	@ (8000650 <calculate_and_print_average+0xa0>)
 8000606:	f004 fe8d 	bl	8005324 <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	4811      	ldr	r0, [pc, #68]	@ (8000650 <calculate_and_print_average+0xa0>)
 800060c:	f7ff fdf0 	bl	80001f0 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	490d      	ldr	r1, [pc, #52]	@ (8000650 <calculate_and_print_average+0xa0>)
 800061a:	480e      	ldr	r0, [pc, #56]	@ (8000654 <calculate_and_print_average+0xa4>)
 800061c:	f004 f924 	bl	8004868 <HAL_UART_Transmit>

    resistorSum = 0;
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <calculate_and_print_average+0x88>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
    potSum = 0;
 8000626:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <calculate_and_print_average+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
    sampleCount = 0;
 800062c:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <calculate_and_print_average+0xac>)
 800062e:	2200      	movs	r2, #0
 8000630:	801a      	strh	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001b4 	.word	0x200001b4
 800063c:	057619f1 	.word	0x057619f1
 8000640:	200001b0 	.word	0x200001b0
 8000644:	200001b8 	.word	0x200001b8
 8000648:	200001b2 	.word	0x200001b2
 800064c:	08005c7c 	.word	0x08005c7c
 8000650:	2000192c 	.word	0x2000192c
 8000654:	20000128 	.word	0x20000128
 8000658:	08005c94 	.word	0x08005c94
 800065c:	20001960 	.word	0x20001960

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fb80 	bl	8000d6a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f851 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f979 	bl	8000964 <MX_GPIO_Init>
  MX_DMA_Init();
 8000672:	f000 f959 	bl	8000928 <MX_DMA_Init>
  MX_ADC1_Init();
 8000676:	f000 f89d 	bl	80007b4 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800067a:	f000 f929 	bl	80008d0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)raw, NUM_SAMPLES);
 800067e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000682:	491e      	ldr	r1, [pc, #120]	@ (80006fc <main+0x9c>)
 8000684:	481e      	ldr	r0, [pc, #120]	@ (8000700 <main+0xa0>)
 8000686:	f000 ff67 	bl	8001558 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        if (convCompleted)
 800068a:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <main+0xa4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d030      	beq.n	80006f4 <main+0x94>
        {
            resistorSum = 0;
 8000692:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <main+0xa8>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
            potSum = 0;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <main+0xac>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]

            for (uint16_t i = 0; i < NUM_SAMPLES; i += 2)
 800069e:	2300      	movs	r3, #0
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	e017      	b.n	80006d4 <main+0x74>
            {
                resistorSum += raw[i];
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <main+0x9c>)
 80006a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <main+0xa8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	4a14      	ldr	r2, [pc, #80]	@ (8000708 <main+0xa8>)
 80006b6:	6013      	str	r3, [r2, #0]
                potSum += raw[i + 1];
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a0f      	ldr	r2, [pc, #60]	@ (80006fc <main+0x9c>)
 80006be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <main+0xac>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	4a10      	ldr	r2, [pc, #64]	@ (800070c <main+0xac>)
 80006cc:	6013      	str	r3, [r2, #0]
            for (uint16_t i = 0; i < NUM_SAMPLES; i += 2)
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	3302      	adds	r3, #2
 80006d2:	80fb      	strh	r3, [r7, #6]
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80006da:	4293      	cmp	r3, r2
 80006dc:	d9e2      	bls.n	80006a4 <main+0x44>
            }

            calculate_and_print_average();
 80006de:	f7ff ff67 	bl	80005b0 <calculate_and_print_average>

            convCompleted = 0;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <main+0xa4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]

            HAL_ADC_Start_DMA(&hadc1, (uint32_t *)raw, NUM_SAMPLES);
 80006e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80006ec:	4903      	ldr	r1, [pc, #12]	@ (80006fc <main+0x9c>)
 80006ee:	4804      	ldr	r0, [pc, #16]	@ (8000700 <main+0xa0>)
 80006f0:	f000 ff32 	bl	8001558 <HAL_ADC_Start_DMA>
        }

        HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fbad 	bl	8000e54 <HAL_Delay>
        if (convCompleted)
 80006fa:	e7c6      	b.n	800068a <main+0x2a>
 80006fc:	200001bc 	.word	0x200001bc
 8000700:	20000078 	.word	0x20000078
 8000704:	2000195e 	.word	0x2000195e
 8000708:	200001b4 	.word	0x200001b4
 800070c:	200001b8 	.word	0x200001b8

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	@ 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	@ 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fe20 	bl	8005364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000736:	f002 fcdb 	bl	80030f0 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 f934 	bl	80009ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2340      	movs	r3, #64	@ 0x40
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800075e:	230a      	movs	r3, #10
 8000760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fd22 	bl	80031bc <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800077e:	f000 f915 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	2104      	movs	r1, #4
 800079c:	4618      	mov	r0, r3
 800079e:	f003 f927 	bl	80039f0 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a8:	f000 f900 	bl	80009ac <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3758      	adds	r7, #88	@ 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d6:	4b3a      	ldr	r3, [pc, #232]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 80007d8:	4a3a      	ldr	r2, [pc, #232]	@ (80008c4 <MX_ADC1_Init+0x110>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007dc:	4b38      	ldr	r3, [pc, #224]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e2:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e8:	4b35      	ldr	r3, [pc, #212]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ee:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b32      	ldr	r3, [pc, #200]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fa:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000800:	4b2f      	ldr	r3, [pc, #188]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 8000802:	2201      	movs	r2, #1
 8000804:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000806:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 8000808:	2202      	movs	r2, #2
 800080a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080c:	4b2c      	ldr	r3, [pc, #176]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081a:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000820:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 800082a:	2200      	movs	r2, #0
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800082e:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000836:	4822      	ldr	r0, [pc, #136]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 8000838:	f000 fd3a 	bl	80012b0 <HAL_ADC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000842:	f000 f8b3 	bl	80009ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	481b      	ldr	r0, [pc, #108]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 8000852:	f001 fef3 	bl	800263c <HAL_ADCEx_MultiModeConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800085c:	f000 f8a6 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000860:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <MX_ADC1_Init+0x114>)
 8000862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000864:	2306      	movs	r3, #6
 8000866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800086c:	237f      	movs	r3, #127	@ 0x7f
 800086e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000870:	2304      	movs	r3, #4
 8000872:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4810      	ldr	r0, [pc, #64]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 800087e:	f001 f95f 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000888:	f000 f890 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <MX_ADC1_Init+0x118>)
 800088e:	607b      	str	r3, [r7, #4]
       sConfig.Rank = ADC_REGULAR_RANK_2;
 8000890:	230c      	movs	r3, #12
 8000892:	60bb      	str	r3, [r7, #8]
       sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000894:	2306      	movs	r3, #6
 8000896:	60fb      	str	r3, [r7, #12]
       sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000898:	237f      	movs	r3, #127	@ 0x7f
 800089a:	613b      	str	r3, [r7, #16]
       sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800089c:	2304      	movs	r3, #4
 800089e:	617b      	str	r3, [r7, #20]
       sConfig.Offset = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
       if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_ADC1_Init+0x10c>)
 80008aa:	f001 f949 	bl	8001b40 <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x104>
       {
         Error_Handler();
 80008b4:	f000 f87a 	bl	80009ac <Error_Handler>
       }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	@ 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000078 	.word	0x20000078
 80008c4:	50040000 	.word	0x50040000
 80008c8:	04300002 	.word	0x04300002
 80008cc:	10c00010 	.word	0x10c00010

080008d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 800090e:	f003 ff5d 	bl	80047cc <HAL_UART_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 f848 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000128 	.word	0x20000128
 8000924:	40008000 	.word	0x40008000

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_DMA_Init+0x38>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	4a0b      	ldr	r2, [pc, #44]	@ (8000960 <MX_DMA_Init+0x38>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6493      	str	r3, [r2, #72]	@ 0x48
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_DMA_Init+0x38>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200b      	movs	r0, #11
 800094c:	f002 f801 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000950:	200b      	movs	r0, #11
 8000952:	f002 f81a 	bl	800298a <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_GPIO_Init+0x44>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <MX_GPIO_Init+0x44>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_GPIO_Init+0x44>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_GPIO_Init+0x44>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <MX_GPIO_Init+0x44>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_GPIO_Init+0x44>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800099a:	f002 fbff 	bl	800319c <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c2:	4a0e      	ldr	r2, [pc, #56]	@ (80009fc <HAL_MspInit+0x44>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0ac      	sub	sp, #176	@ 0xb0
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	228c      	movs	r2, #140	@ 0x8c
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 fc9f 	bl	8005364 <memset>
  if(hadc->Instance==ADC1)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a40      	ldr	r2, [pc, #256]	@ (8000b2c <HAL_ADC_MspInit+0x12c>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d179      	bne.n	8000b24 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a46:	2308      	movs	r3, #8
 8000a48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 f9e9 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a6c:	f7ff ff9e 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a70:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <HAL_ADC_MspInit+0x130>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a74:	4a2e      	ldr	r2, [pc, #184]	@ (8000b30 <HAL_ADC_MspInit+0x130>)
 8000a76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <HAL_ADC_MspInit+0x130>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <HAL_ADC_MspInit+0x130>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <HAL_ADC_MspInit+0x130>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <HAL_ADC_MspInit+0x130>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000aa0:	2309      	movs	r3, #9
 8000aa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <HAL_ADC_MspInit+0x134>)
 8000aba:	f002 f979 	bl	8002db0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <HAL_ADC_MspInit+0x13c>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000ade:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000af8:	480f      	ldr	r0, [pc, #60]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000afa:	f001 ff61 	bl	80029c0 <HAL_DMA_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000b04:	f7ff ff52 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000b0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_ADC_MspInit+0x138>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2012      	movs	r0, #18
 8000b1a:	f001 ff1a 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b1e:	2012      	movs	r0, #18
 8000b20:	f001 ff33 	bl	800298a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b24:	bf00      	nop
 8000b26:	37b0      	adds	r7, #176	@ 0xb0
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	50040000 	.word	0x50040000
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800
 8000b38:	200000e0 	.word	0x200000e0
 8000b3c:	40020008 	.word	0x40020008

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ac      	sub	sp, #176	@ 0xb0
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	228c      	movs	r2, #140	@ 0x8c
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 fbff 	bl	8005364 <memset>
  if(huart->Instance==LPUART1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a22      	ldr	r2, [pc, #136]	@ (8000bf4 <HAL_UART_MspInit+0xb4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d13d      	bne.n	8000bec <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b70:	2320      	movs	r3, #32
 8000b72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 f95b 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b88:	f7ff ff10 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <HAL_UART_MspInit+0xb8>)
 8000b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b90:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <HAL_UART_MspInit+0xb8>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <HAL_UART_MspInit+0xb8>)
 8000b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <HAL_UART_MspInit+0xb8>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba8:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <HAL_UART_MspInit+0xb8>)
 8000baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <HAL_UART_MspInit+0xb8>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000bbc:	f002 faee 	bl	800319c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bc0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <HAL_UART_MspInit+0xbc>)
 8000be8:	f002 f8e2 	bl	8002db0 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000bec:	bf00      	nop
 8000bee:	37b0      	adds	r7, #176	@ 0xb0
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40008000 	.word	0x40008000
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48001800 	.word	0x48001800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f8dd 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <DMA1_Channel1_IRQHandler+0x10>)
 8000c66:	f001 ffc3 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000e0 	.word	0x200000e0

08000c74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <ADC1_2_IRQHandler+0x10>)
 8000c7a:	f000 fd29 	bl	80016d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000078 	.word	0x20000078

08000c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c90:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <_sbrk+0x5c>)
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <_sbrk+0x60>)
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <_sbrk+0x64>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <_sbrk+0x68>)
 8000ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d207      	bcs.n	8000cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb8:	f004 fb5c 	bl	8005374 <__errno>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e009      	b.n	8000cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a05      	ldr	r2, [pc, #20]	@ (8000cec <_sbrk+0x64>)
 8000cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20050000 	.word	0x20050000
 8000ce8:	00000400 	.word	0x00000400
 8000cec:	20001964 	.word	0x20001964
 8000cf0:	20001ab8 	.word	0x20001ab8

08000cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d1c:	f7ff ffea 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <LoopForever+0xe>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	@ (8000d64 <LoopForever+0x16>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f004 fb1b 	bl	8005380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4a:	f7ff fc89 	bl	8000660 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d5c:	08005d34 	.word	0x08005d34
  ldr r2, =_sbss
 8000d60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d64:	20001ab4 	.word	0x20001ab4

08000d68 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC3_IRQHandler>

08000d6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f001 fde1 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 f80e 	bl	8000d9c <HAL_InitTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	e001      	b.n	8000d90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8c:	f7ff fe14 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_InitTick+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d023      	beq.n	8000df8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_InitTick+0x70>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_InitTick+0x6c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fded 	bl	80029a6 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10f      	bne.n	8000df2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d809      	bhi.n	8000dec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f001 fdb7 	bl	8002952 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_InitTick+0x74>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e001      	b.n	8000dfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20001968 	.word	0x20001968

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20001968 	.word	0x20001968

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	609a      	str	r2, [r3, #8]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3360      	adds	r3, #96	@ 0x60
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <LL_ADC_SetOffset+0x44>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	03fff000 	.word	0x03fff000

08000f4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3360      	adds	r3, #96	@ 0x60
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3360      	adds	r3, #96	@ 0x60
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fa2:	bf00      	nop
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	615a      	str	r2, [r3, #20]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b087      	sub	sp, #28
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3330      	adds	r3, #48	@ 0x30
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	4413      	add	r3, r2
 8001018:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	211f      	movs	r1, #31
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0e9b      	lsrs	r3, r3, #26
 8001032:	f003 011f 	and.w	r1, r3, #31
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3314      	adds	r3, #20
 8001088:	461a      	mov	r2, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	0e5b      	lsrs	r3, r3, #25
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	0d1b      	lsrs	r3, r3, #20
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	2107      	movs	r1, #7
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	401a      	ands	r2, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	0d1b      	lsrs	r3, r3, #20
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	431a      	orrs	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010e8:	43db      	mvns	r3, r3
 80010ea:	401a      	ands	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0318 	and.w	r3, r3, #24
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010f4:	40d9      	lsrs	r1, r3
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	400b      	ands	r3, r1
 80010fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010fe:	431a      	orrs	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	0007ffff 	.word	0x0007ffff

08001118 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 031f 	and.w	r3, r3, #31
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001160:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6093      	str	r3, [r2, #8]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001188:	d101      	bne.n	800118e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80011ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80011d8:	d101      	bne.n	80011de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <LL_ADC_IsEnabled+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_ADC_IsEnabled+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800124a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800124e:	f043 0204 	orr.w	r2, r3, #4
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b04      	cmp	r3, #4
 8001274:	d101      	bne.n	800127a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b08      	cmp	r3, #8
 800129a:	d101      	bne.n	80012a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e133      	b.n	8001532 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fb91 	bl	8000a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff3f 	bl	8001174 <LL_ADC_IsDeepPowerDownEnabled>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff25 	bl	8001150 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff5a 	bl	80011c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d115      	bne.n	8001342 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff3e 	bl	800119c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001320:	4b86      	ldr	r3, [pc, #536]	@ (800153c <HAL_ADC_Init+0x28c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	099b      	lsrs	r3, r3, #6
 8001326:	4a86      	ldr	r2, [pc, #536]	@ (8001540 <HAL_ADC_Init+0x290>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	3301      	adds	r3, #1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001334:	e002      	b.n	800133c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3b01      	subs	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff3c 	bl	80011c4 <LL_ADC_IsInternalRegulatorEnabled>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff75 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001378:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80cc 	bne.w	8001520 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 80c8 	bne.w	8001520 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001394:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff35 	bl	8001214 <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d115      	bne.n	80013dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b0:	4864      	ldr	r0, [pc, #400]	@ (8001544 <HAL_ADC_Init+0x294>)
 80013b2:	f7ff ff2f 	bl	8001214 <LL_ADC_IsEnabled>
 80013b6:	4604      	mov	r4, r0
 80013b8:	4863      	ldr	r0, [pc, #396]	@ (8001548 <HAL_ADC_Init+0x298>)
 80013ba:	f7ff ff2b 	bl	8001214 <LL_ADC_IsEnabled>
 80013be:	4603      	mov	r3, r0
 80013c0:	431c      	orrs	r4, r3
 80013c2:	4862      	ldr	r0, [pc, #392]	@ (800154c <HAL_ADC_Init+0x29c>)
 80013c4:	f7ff ff26 	bl	8001214 <LL_ADC_IsEnabled>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4323      	orrs	r3, r4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4619      	mov	r1, r3
 80013d6:	485e      	ldr	r0, [pc, #376]	@ (8001550 <HAL_ADC_Init+0x2a0>)
 80013d8:	f7ff fd60 	bl	8000e9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e5b      	ldrb	r3, [r3, #25]
 80013e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140e:	3b01      	subs	r3, #1
 8001410:	045b      	lsls	r3, r3, #17
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001424:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4b46      	ldr	r3, [pc, #280]	@ (8001554 <HAL_ADC_Init+0x2a4>)
 800143c:	4013      	ands	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	430b      	orrs	r3, r1
 8001446:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff1b 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 8001452:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d140      	bne.n	80014dc <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d13d      	bne.n	80014dc <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7e1b      	ldrb	r3, [r3, #24]
 8001468:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800146a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001472:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001482:	f023 0306 	bic.w	r3, r3, #6
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	430b      	orrs	r3, r1
 800148e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001496:	2b01      	cmp	r3, #1
 8001498:	d118      	bne.n	80014cc <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014b0:	4311      	orrs	r1, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014b6:	4311      	orrs	r1, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014bc:	430a      	orrs	r2, r1
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	e007      	b.n	80014dc <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10c      	bne.n	80014fe <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f023 010f 	bic.w	r1, r3, #15
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	1e5a      	subs	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80014fc:	e007      	b.n	800150e <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 020f 	bic.w	r2, r2, #15
 800150c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	659a      	str	r2, [r3, #88]	@ 0x58
 800151e:	e007      	b.n	8001530 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	f043 0210 	orr.w	r2, r3, #16
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001530:	7ffb      	ldrb	r3, [r7, #31]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	@ 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	20000000 	.word	0x20000000
 8001540:	053e2d63 	.word	0x053e2d63
 8001544:	50040000 	.word	0x50040000
 8001548:	50040100 	.word	0x50040100
 800154c:	50040200 	.word	0x50040200
 8001550:	50040300 	.word	0x50040300
 8001554:	fff0c007 	.word	0xfff0c007

08001558 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001564:	4853      	ldr	r0, [pc, #332]	@ (80016b4 <HAL_ADC_Start_DMA+0x15c>)
 8001566:	f7ff fdd7 	bl	8001118 <LL_ADC_GetMultimode>
 800156a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe76 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 8093 	bne.w	80016a4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADC_Start_DMA+0x34>
 8001588:	2302      	movs	r3, #2
 800158a:	e08e      	b.n	80016aa <HAL_ADC_Start_DMA+0x152>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a47      	ldr	r2, [pc, #284]	@ (80016b8 <HAL_ADC_Start_DMA+0x160>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d008      	beq.n	80015b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d002      	beq.n	80015b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d172      	bne.n	8001696 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fed1 	bl	8002358 <ADC_Enable>
 80015b6:	4603      	mov	r3, r0
 80015b8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d165      	bne.n	800168c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a38      	ldr	r2, [pc, #224]	@ (80016bc <HAL_ADC_Start_DMA+0x164>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d002      	beq.n	80015e4 <HAL_ADC_Start_DMA+0x8c>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_Start_DMA+0x8e>
 80015e4:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <HAL_ADC_Start_DMA+0x168>)
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d002      	beq.n	80015f4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001610:	f023 0206 	bic.w	r2, r3, #6
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001618:	e002      	b.n	8001620 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001624:	4a27      	ldr	r2, [pc, #156]	@ (80016c4 <HAL_ADC_Start_DMA+0x16c>)
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800162c:	4a26      	ldr	r2, [pc, #152]	@ (80016c8 <HAL_ADC_Start_DMA+0x170>)
 800162e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001634:	4a25      	ldr	r2, [pc, #148]	@ (80016cc <HAL_ADC_Start_DMA+0x174>)
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	221c      	movs	r2, #28
 800163e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0210 	orr.w	r2, r2, #16
 8001656:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3340      	adds	r3, #64	@ 0x40
 8001672:	4619      	mov	r1, r3
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f001 fa5a 	bl	8002b30 <HAL_DMA_Start_IT>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fdd8 	bl	800123a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800168a:	e00d      	b.n	80016a8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8001694:	e008      	b.n	80016a8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80016a2:	e001      	b.n	80016a8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
 80016a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	50040300 	.word	0x50040300
 80016b8:	50040200 	.word	0x50040200
 80016bc:	50040100 	.word	0x50040100
 80016c0:	50040000 	.word	0x50040000
 80016c4:	08002465 	.word	0x08002465
 80016c8:	0800253d 	.word	0x0800253d
 80016cc:	08002559 	.word	0x08002559

080016d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016ec:	4882      	ldr	r0, [pc, #520]	@ (80018f8 <HAL_ADC_IRQHandler+0x228>)
 80016ee:	f7ff fd13 	bl	8001118 <LL_ADC_GetMultimode>
 80016f2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d017      	beq.n	800172e <HAL_ADC_IRQHandler+0x5e>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d012      	beq.n	800172e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001718:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 ff81 	bl	8002628 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2202      	movs	r2, #2
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_ADC_IRQHandler+0x72>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10a      	bne.n	8001758 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8083 	beq.w	8001854 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d07d      	beq.n	8001854 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001768:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fc2d 	bl	8000fd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d062      	beq.n	8001846 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5d      	ldr	r2, [pc, #372]	@ (80018fc <HAL_ADC_IRQHandler+0x22c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d002      	beq.n	8001790 <HAL_ADC_IRQHandler+0xc0>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	e000      	b.n	8001792 <HAL_ADC_IRQHandler+0xc2>
 8001790:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <HAL_ADC_IRQHandler+0x230>)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	4293      	cmp	r3, r2
 8001798:	d008      	beq.n	80017ac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d002      	beq.n	80017ac <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b09      	cmp	r3, #9
 80017aa:	d104      	bne.n	80017b6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	623b      	str	r3, [r7, #32]
 80017b4:	e00c      	b.n	80017d0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a50      	ldr	r2, [pc, #320]	@ (80018fc <HAL_ADC_IRQHandler+0x22c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d002      	beq.n	80017c6 <HAL_ADC_IRQHandler+0xf6>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e000      	b.n	80017c8 <HAL_ADC_IRQHandler+0xf8>
 80017c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001900 <HAL_ADC_IRQHandler+0x230>)
 80017c8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d135      	bne.n	8001846 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d12e      	bne.n	8001846 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fd38 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d11a      	bne.n	800182e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 020c 	bic.w	r2, r2, #12
 8001806:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d112      	bne.n	8001846 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	@ 0x58
 800182c:	e00b      	b.n	8001846 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	f043 0210 	orr.w	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe fea2 	bl	8000590 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	220c      	movs	r2, #12
 8001852:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b00      	cmp	r3, #0
 800185c:	d004      	beq.n	8001868 <HAL_ADC_IRQHandler+0x198>
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10b      	bne.n	8001880 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 809f 	beq.w	80019b2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8099 	beq.w	80019b2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fbd8 	bl	8001052 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80018a2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fb93 	bl	8000fd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018ae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a11      	ldr	r2, [pc, #68]	@ (80018fc <HAL_ADC_IRQHandler+0x22c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d002      	beq.n	80018c0 <HAL_ADC_IRQHandler+0x1f0>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	e000      	b.n	80018c2 <HAL_ADC_IRQHandler+0x1f2>
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <HAL_ADC_IRQHandler+0x230>)
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d008      	beq.n	80018dc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d002      	beq.n	80018dc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b07      	cmp	r3, #7
 80018da:	d104      	bne.n	80018e6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	623b      	str	r3, [r7, #32]
 80018e4:	e013      	b.n	800190e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <HAL_ADC_IRQHandler+0x22c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_ADC_IRQHandler+0x234>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	e007      	b.n	8001906 <HAL_ADC_IRQHandler+0x236>
 80018f6:	bf00      	nop
 80018f8:	50040300 	.word	0x50040300
 80018fc:	50040100 	.word	0x50040100
 8001900:	50040000 	.word	0x50040000
 8001904:	4b7d      	ldr	r3, [pc, #500]	@ (8001afc <HAL_ADC_IRQHandler+0x42c>)
 8001906:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d047      	beq.n	80019a4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_ADC_IRQHandler+0x25e>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03f      	beq.n	80019a4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d13a      	bne.n	80019a4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001938:	2b40      	cmp	r3, #64	@ 0x40
 800193a:	d133      	bne.n	80019a4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d12e      	bne.n	80019a4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc9c 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11a      	bne.n	800198c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001964:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d112      	bne.n	80019a4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	659a      	str	r2, [r3, #88]	@ 0x58
 800198a:	e00b      	b.n	80019a4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	f043 0210 	orr.w	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fe17 	bl	80025d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2260      	movs	r2, #96	@ 0x60
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d011      	beq.n	80019e0 <HAL_ADC_IRQHandler+0x310>
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f8a0 	bl	8001b18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2280      	movs	r2, #128	@ 0x80
 80019de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d012      	beq.n	8001a10 <HAL_ADC_IRQHandler+0x340>
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00d      	beq.n	8001a10 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fdfd 	bl	8002600 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d012      	beq.n	8001a40 <HAL_ADC_IRQHandler+0x370>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00d      	beq.n	8001a40 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a28:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fdef 	bl	8002614 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d036      	beq.n	8001ab8 <HAL_ADC_IRQHandler+0x3e8>
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d031      	beq.n	8001ab8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a60:	e014      	b.n	8001a8c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a68:	4825      	ldr	r0, [pc, #148]	@ (8001b00 <HAL_ADC_IRQHandler+0x430>)
 8001a6a:	f7ff fb63 	bl	8001134 <LL_ADC_GetMultiDMATransfer>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001a74:	2301      	movs	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a78:	e008      	b.n	8001a8c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10e      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f83e 	bl	8001b2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d018      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x424>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d013      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	f043 0208 	orr.w	r2, r3, #8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fd7c 	bl	80025ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	@ 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	50040000 	.word	0x50040000
 8001b00:	50040300 	.word	0x50040300

08001b04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b0b6      	sub	sp, #216	@ 0xd8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x22>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e3e3      	b.n	800232a <HAL_ADC_ConfigChannel+0x7ea>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fb77 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 83c4 	bne.w	8002304 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d824      	bhi.n	8001bd6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	3b02      	subs	r3, #2
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d81b      	bhi.n	8001bce <HAL_ADC_ConfigChannel+0x8e>
 8001b96:	a201      	add	r2, pc, #4	@ (adr r2, 8001b9c <HAL_ADC_ConfigChannel+0x5c>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bb5 	.word	0x08001bb5
 8001ba4:	08001bbd 	.word	0x08001bbd
 8001ba8:	08001bc5 	.word	0x08001bc5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001bac:	230c      	movs	r3, #12
 8001bae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bb2:	e010      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bba:	e00c      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001bbc:	2318      	movs	r3, #24
 8001bbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bc2:	e008      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bcc:	e003      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001bce:	2306      	movs	r3, #6
 8001bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bd4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001be4:	f7ff fa09 	bl	8000ffa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fb38 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001bf2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fb44 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 8001c00:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 81bf 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 81ba 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c20:	d10f      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7ff fa23 	bl	8001078 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f9b7 	bl	8000fae <LL_ADC_SetSamplingTimeCommonConfig>
 8001c40:	e00e      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f7ff fa12 	bl	8001078 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f9a7 	bl	8000fae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d00a      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c92:	f7ff f937 	bl	8000f04 <LL_ADC_SetOffset>
 8001c96:	e179      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f954 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10a      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x184>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f949 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	f003 021f 	and.w	r2, r3, #31
 8001cc2:	e01e      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1c2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f93e 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	e004      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x1da>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0e9b      	lsrs	r3, r3, #26
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	e018      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x20c>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001d36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	e004      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d106      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f90d 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f8f1 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10a      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x24a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f8e6 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	0e9b      	lsrs	r3, r3, #26
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	e01e      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x288>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f8db 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e004      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x2a0>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	e018      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x2d2>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e004      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d106      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f8aa 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f88e 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x310>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f883 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	0e9b      	lsrs	r3, r3, #26
 8001e4a:	f003 021f 	and.w	r2, r3, #31
 8001e4e:	e01e      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x34e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2102      	movs	r1, #2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f878 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e004      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x366>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	e014      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x390>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e004      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2102      	movs	r1, #2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f84b 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f82f 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x3ce>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2103      	movs	r1, #3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f824 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	e017      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x3fe>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2103      	movs	r1, #3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f819 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x416>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	e011      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x43a>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001f64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f66:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001f72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d106      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2103      	movs	r1, #3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fff6 	bl	8000f78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f93f 	bl	8001214 <LL_ADC_IsEnabled>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f040 813f 	bne.w	800221c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f7ff f890 	bl	80010d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a8e      	ldr	r2, [pc, #568]	@ (80021f0 <HAL_ADC_ConfigChannel+0x6b0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 8130 	bne.w	800221c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x4a4>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	bf94      	ite	ls
 8001fdc:	2301      	movls	r3, #1
 8001fde:	2300      	movhi	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e019      	b.n	8002018 <HAL_ADC_ConfigChannel+0x4d8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e003      	b.n	8002008 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	2b09      	cmp	r3, #9
 8002010:	bf94      	ite	ls
 8002012:	2301      	movls	r3, #1
 8002014:	2300      	movhi	r3, #0
 8002016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002018:	2b00      	cmp	r3, #0
 800201a:	d079      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x4f8>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	3301      	adds	r3, #1
 8002030:	069b      	lsls	r3, r3, #26
 8002032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002036:	e015      	b.n	8002064 <HAL_ADC_ConfigChannel+0x524>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002048:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800204a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	069b      	lsls	r3, r3, #26
 8002060:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x544>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	3301      	adds	r3, #1
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	e017      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x574>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002094:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e003      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80020a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	ea42 0103 	orr.w	r1, r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <HAL_ADC_ConfigChannel+0x59a>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	3301      	adds	r3, #1
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	051b      	lsls	r3, r3, #20
 80020d8:	e018      	b.n	800210c <HAL_ADC_ConfigChannel+0x5cc>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80020ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e003      	b.n	80020fe <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80020f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210c:	430b      	orrs	r3, r1
 800210e:	e080      	b.n	8002212 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_ADC_ConfigChannel+0x5ec>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	3301      	adds	r3, #1
 8002124:	069b      	lsls	r3, r3, #26
 8002126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800212a:	e015      	b.n	8002158 <HAL_ADC_ConfigChannel+0x618>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800213e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002144:	2320      	movs	r3, #32
 8002146:	e003      	b.n	8002150 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	3301      	adds	r3, #1
 8002152:	069b      	lsls	r3, r3, #26
 8002154:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x638>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	3301      	adds	r3, #1
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	e017      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x668>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	61bb      	str	r3, [r7, #24]
  return result;
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e003      	b.n	800219c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	ea42 0103 	orr.w	r1, r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10d      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x694>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	3301      	adds	r3, #1
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	3b1e      	subs	r3, #30
 80021cc:	051b      	lsls	r3, r3, #20
 80021ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	e01d      	b.n	8002210 <HAL_ADC_ConfigChannel+0x6d0>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	60fb      	str	r3, [r7, #12]
  return result;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d103      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e005      	b.n	80021fc <HAL_ADC_ConfigChannel+0x6bc>
 80021f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	3b1e      	subs	r3, #30
 800220a:	051b      	lsls	r3, r3, #20
 800220c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002210:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe ff2e 	bl	8001078 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b44      	ldr	r3, [pc, #272]	@ (8002334 <HAL_ADC_ConfigChannel+0x7f4>)
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d07a      	beq.n	800231e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002228:	4843      	ldr	r0, [pc, #268]	@ (8002338 <HAL_ADC_ConfigChannel+0x7f8>)
 800222a:	f7fe fe5d 	bl	8000ee8 <LL_ADC_GetCommonPathInternalCh>
 800222e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a41      	ldr	r2, [pc, #260]	@ (800233c <HAL_ADC_ConfigChannel+0x7fc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d12c      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800223c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d126      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3c      	ldr	r2, [pc, #240]	@ (8002340 <HAL_ADC_ConfigChannel+0x800>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_ADC_ConfigChannel+0x71c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a3b      	ldr	r2, [pc, #236]	@ (8002344 <HAL_ADC_ConfigChannel+0x804>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d15d      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002260:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002264:	4619      	mov	r1, r3
 8002266:	4834      	ldr	r0, [pc, #208]	@ (8002338 <HAL_ADC_ConfigChannel+0x7f8>)
 8002268:	f7fe fe2b 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800226c:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <HAL_ADC_ConfigChannel+0x808>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	4a36      	ldr	r2, [pc, #216]	@ (800234c <HAL_ADC_ConfigChannel+0x80c>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002286:	e002      	b.n	800228e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3b01      	subs	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f9      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002294:	e040      	b.n	8002318 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <HAL_ADC_ConfigChannel+0x810>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d118      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d112      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a23      	ldr	r2, [pc, #140]	@ (8002340 <HAL_ADC_ConfigChannel+0x800>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x780>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <HAL_ADC_ConfigChannel+0x804>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d12d      	bne.n	800231c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022c8:	4619      	mov	r1, r3
 80022ca:	481b      	ldr	r0, [pc, #108]	@ (8002338 <HAL_ADC_ConfigChannel+0x7f8>)
 80022cc:	f7fe fdf9 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022d0:	e024      	b.n	800231c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002354 <HAL_ADC_ConfigChannel+0x814>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d120      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11a      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <HAL_ADC_ConfigChannel+0x800>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d115      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022fa:	4619      	mov	r1, r3
 80022fc:	480e      	ldr	r0, [pc, #56]	@ (8002338 <HAL_ADC_ConfigChannel+0x7f8>)
 80022fe:	f7fe fde0 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
 8002302:	e00c      	b.n	800231e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002316:	e002      	b.n	800231e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800231c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002326:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800232a:	4618      	mov	r0, r3
 800232c:	37d8      	adds	r7, #216	@ 0xd8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	80080000 	.word	0x80080000
 8002338:	50040300 	.word	0x50040300
 800233c:	c7520000 	.word	0xc7520000
 8002340:	50040000 	.word	0x50040000
 8002344:	50040200 	.word	0x50040200
 8002348:	20000000 	.word	0x20000000
 800234c:	053e2d63 	.word	0x053e2d63
 8002350:	cb840000 	.word	0xcb840000
 8002354:	80000001 	.word	0x80000001

08002358 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe ff53 	bl	8001214 <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d169      	bne.n	8002448 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <ADC_Enable+0xfc>)
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e055      	b.n	800244a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ff22 	bl	80011ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023a8:	482b      	ldr	r0, [pc, #172]	@ (8002458 <ADC_Enable+0x100>)
 80023aa:	f7fe fd9d 	bl	8000ee8 <LL_ADC_GetCommonPathInternalCh>
 80023ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <ADC_Enable+0x104>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <ADC_Enable+0x108>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023d2:	e002      	b.n	80023da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fd2c 	bl	8000e3c <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023e6:	e028      	b.n	800243a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe ff11 	bl	8001214 <LL_ADC_IsEnabled>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d104      	bne.n	8002402 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fef5 	bl	80011ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002402:	f7fe fd1b 	bl	8000e3c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d914      	bls.n	800243a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d00d      	beq.n	800243a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e007      	b.n	800244a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d1cf      	bne.n	80023e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	8000003f 	.word	0x8000003f
 8002458:	50040300 	.word	0x50040300
 800245c:	20000000 	.word	0x20000000
 8002460:	053e2d63 	.word	0x053e2d63

08002464 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800247a:	2b00      	cmp	r3, #0
 800247c:	d14b      	bne.n	8002516 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d021      	beq.n	80024dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fd99 	bl	8000fd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d032      	beq.n	800250e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d12b      	bne.n	800250e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11f      	bne.n	800250e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80024da:	e018      	b.n	800250e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d111      	bne.n	800250e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7fe f83e 	bl	8000590 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002514:	e00e      	b.n	8002534 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fb02 	bl	8001b2c <HAL_ADC_ErrorCallback>
}
 8002528:	e004      	b.n	8002534 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff fada 	bl	8001b04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002576:	f043 0204 	orr.w	r2, r3, #4
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff fad4 	bl	8001b2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <LL_ADC_IsEnabled>:
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <LL_ADC_IsEnabled+0x18>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <LL_ADC_IsEnabled+0x1a>
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d101      	bne.n	80025ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b0a1      	sub	sp, #132	@ 0x84
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002656:	2302      	movs	r3, #2
 8002658:	e093      	b.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002662:	2300      	movs	r3, #0
 8002664:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002666:	2300      	movs	r3, #0
 8002668:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a47      	ldr	r2, [pc, #284]	@ (800278c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d102      	bne.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002674:	4b46      	ldr	r3, [pc, #280]	@ (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e001      	b.n	800267e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e072      	b.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff87 	bl	80025b2 <LL_ADC_REG_IsConversionOngoing>
 80026a4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff81 	bl	80025b2 <LL_ADC_REG_IsConversionOngoing>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d154      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80026b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d151      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026bc:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80026be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d02c      	beq.n	8002722 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026da:	035b      	lsls	r3, r3, #13
 80026dc:	430b      	orrs	r3, r1
 80026de:	431a      	orrs	r2, r3
 80026e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e4:	4829      	ldr	r0, [pc, #164]	@ (800278c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026e6:	f7ff ff51 	bl	800258c <LL_ADC_IsEnabled>
 80026ea:	4604      	mov	r4, r0
 80026ec:	4828      	ldr	r0, [pc, #160]	@ (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026ee:	f7ff ff4d 	bl	800258c <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	431c      	orrs	r4, r3
 80026f6:	4828      	ldr	r0, [pc, #160]	@ (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026f8:	f7ff ff48 	bl	800258c <LL_ADC_IsEnabled>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4323      	orrs	r3, r4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d137      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800270c:	f023 030f 	bic.w	r3, r3, #15
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	6811      	ldr	r1, [r2, #0]
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	430a      	orrs	r2, r1
 800271a:	431a      	orrs	r2, r3
 800271c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800271e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002720:	e028      	b.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800272a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272e:	4817      	ldr	r0, [pc, #92]	@ (800278c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002730:	f7ff ff2c 	bl	800258c <LL_ADC_IsEnabled>
 8002734:	4604      	mov	r4, r0
 8002736:	4816      	ldr	r0, [pc, #88]	@ (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002738:	f7ff ff28 	bl	800258c <LL_ADC_IsEnabled>
 800273c:	4603      	mov	r3, r0
 800273e:	431c      	orrs	r4, r3
 8002740:	4815      	ldr	r0, [pc, #84]	@ (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002742:	f7ff ff23 	bl	800258c <LL_ADC_IsEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	4323      	orrs	r3, r4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d112      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800274e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002756:	f023 030f 	bic.w	r3, r3, #15
 800275a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800275c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800275e:	e009      	b.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002772:	e000      	b.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002774:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800277e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002782:	4618      	mov	r0, r3
 8002784:	3784      	adds	r7, #132	@ 0x84
 8002786:	46bd      	mov	sp, r7
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	bf00      	nop
 800278c:	50040000 	.word	0x50040000
 8002790:	50040100 	.word	0x50040100
 8002794:	50040300 	.word	0x50040300
 8002798:	50040200 	.word	0x50040200

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	@ (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	@ (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	@ (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f7ff ff8e 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff29 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002964:	f7ff ff3e 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7ff ff8e 	bl	8002890 <NVIC_EncodePriority>
 8002974:	4602      	mov	r2, r0
 8002976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5d 	bl	800283c <__NVIC_SetPriority>
}
 8002982:	bf00      	nop
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff31 	bl	8002800 <__NVIC_EnableIRQ>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffa2 	bl	80028f8 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e098      	b.n	8002b04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b10 <HAL_DMA_Init+0x150>)
 80029da:	429a      	cmp	r2, r3
 80029dc:	d80f      	bhi.n	80029fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b14 <HAL_DMA_Init+0x154>)
 80029e6:	4413      	add	r3, r2
 80029e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b18 <HAL_DMA_Init+0x158>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	009a      	lsls	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	@ (8002b1c <HAL_DMA_Init+0x15c>)
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80029fc:	e00e      	b.n	8002a1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b46      	ldr	r3, [pc, #280]	@ (8002b20 <HAL_DMA_Init+0x160>)
 8002a06:	4413      	add	r3, r2
 8002a08:	4a43      	ldr	r2, [pc, #268]	@ (8002b18 <HAL_DMA_Init+0x158>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	009a      	lsls	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a42      	ldr	r2, [pc, #264]	@ (8002b24 <HAL_DMA_Init+0x164>)
 8002a1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a76:	d039      	beq.n	8002aec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	4a27      	ldr	r2, [pc, #156]	@ (8002b1c <HAL_DMA_Init+0x15c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11a      	bne.n	8002ab8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a82:	4b29      	ldr	r3, [pc, #164]	@ (8002b28 <HAL_DMA_Init+0x168>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f003 031c 	and.w	r3, r3, #28
 8002a8e:	210f      	movs	r1, #15
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4924      	ldr	r1, [pc, #144]	@ (8002b28 <HAL_DMA_Init+0x168>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a9c:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_DMA_Init+0x168>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	f003 031c 	and.w	r3, r3, #28
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	491d      	ldr	r1, [pc, #116]	@ (8002b28 <HAL_DMA_Init+0x168>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
 8002ab6:	e019      	b.n	8002aec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <HAL_DMA_Init+0x16c>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac0:	f003 031c 	and.w	r3, r3, #28
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	4917      	ldr	r1, [pc, #92]	@ (8002b2c <HAL_DMA_Init+0x16c>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ad2:	4b16      	ldr	r3, [pc, #88]	@ (8002b2c <HAL_DMA_Init+0x16c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f003 031c 	and.w	r3, r3, #28
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	4911      	ldr	r1, [pc, #68]	@ (8002b2c <HAL_DMA_Init+0x16c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40020407 	.word	0x40020407
 8002b14:	bffdfff8 	.word	0xbffdfff8
 8002b18:	cccccccd 	.word	0xcccccccd
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	bffdfbf8 	.word	0xbffdfbf8
 8002b24:	40020400 	.word	0x40020400
 8002b28:	400200a8 	.word	0x400200a8
 8002b2c:	400204a8 	.word	0x400204a8

08002b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_DMA_Start_IT+0x20>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e04b      	b.n	8002be8 <HAL_DMA_Start_IT+0xb8>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d13a      	bne.n	8002bda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f8e0 	bl	8002d4e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 020e 	orr.w	r2, r2, #14
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00f      	b.n	8002bc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0204 	bic.w	r2, r2, #4
 8002bb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 020a 	orr.w	r2, r2, #10
 8002bc6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e005      	b.n	8002be6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
 8002be4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	f003 031c 	and.w	r3, r3, #28
 8002c10:	2204      	movs	r2, #4
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d026      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x7a>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d021      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c48:	f003 021c 	and.w	r2, r3, #28
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	2104      	movs	r1, #4
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d071      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c68:	e06c      	b.n	8002d44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f003 031c 	and.w	r3, r3, #28
 8002c72:	2202      	movs	r2, #2
 8002c74:	409a      	lsls	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02e      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xec>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d029      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 020a 	bic.w	r2, r2, #10
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f003 021c 	and.w	r2, r3, #28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	2102      	movs	r1, #2
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d038      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cda:	e033      	b.n	8002d44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	f003 031c 	and.w	r3, r3, #28
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d02a      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d025      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 020e 	bic.w	r2, r2, #14
 8002d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f003 021c 	and.w	r2, r3, #28
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
}
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	f003 021c 	and.w	r2, r3, #28
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d108      	bne.n	8002d92 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d90:	e007      	b.n	8002da2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	e166      	b.n	800308e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8158 	beq.w	8003088 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d005      	beq.n	8002df0 <HAL_GPIO_Init+0x40>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d130      	bne.n	8002e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e26:	2201      	movs	r2, #1
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	f003 0201 	and.w	r2, r3, #1
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d017      	beq.n	8002e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d123      	bne.n	8002ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	08da      	lsrs	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3208      	adds	r2, #8
 8002ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	6939      	ldr	r1, [r7, #16]
 8002ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80b2 	beq.w	8003088 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f24:	4b61      	ldr	r3, [pc, #388]	@ (80030ac <HAL_GPIO_Init+0x2fc>)
 8002f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f28:	4a60      	ldr	r2, [pc, #384]	@ (80030ac <HAL_GPIO_Init+0x2fc>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f30:	4b5e      	ldr	r3, [pc, #376]	@ (80030ac <HAL_GPIO_Init+0x2fc>)
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80030b0 <HAL_GPIO_Init+0x300>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f66:	d02b      	beq.n	8002fc0 <HAL_GPIO_Init+0x210>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a52      	ldr	r2, [pc, #328]	@ (80030b4 <HAL_GPIO_Init+0x304>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d025      	beq.n	8002fbc <HAL_GPIO_Init+0x20c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a51      	ldr	r2, [pc, #324]	@ (80030b8 <HAL_GPIO_Init+0x308>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d01f      	beq.n	8002fb8 <HAL_GPIO_Init+0x208>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a50      	ldr	r2, [pc, #320]	@ (80030bc <HAL_GPIO_Init+0x30c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d019      	beq.n	8002fb4 <HAL_GPIO_Init+0x204>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a4f      	ldr	r2, [pc, #316]	@ (80030c0 <HAL_GPIO_Init+0x310>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_GPIO_Init+0x200>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80030c4 <HAL_GPIO_Init+0x314>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_GPIO_Init+0x1fc>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a4d      	ldr	r2, [pc, #308]	@ (80030c8 <HAL_GPIO_Init+0x318>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0x1f8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a4c      	ldr	r2, [pc, #304]	@ (80030cc <HAL_GPIO_Init+0x31c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_GPIO_Init+0x1f4>
 8002fa0:	2307      	movs	r3, #7
 8002fa2:	e00e      	b.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	e00c      	b.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fa8:	2306      	movs	r3, #6
 8002faa:	e00a      	b.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fac:	2305      	movs	r3, #5
 8002fae:	e008      	b.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	e006      	b.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e004      	b.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e002      	b.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	f002 0203 	and.w	r2, r2, #3
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	4093      	lsls	r3, r2
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fd2:	4937      	ldr	r1, [pc, #220]	@ (80030b0 <HAL_GPIO_Init+0x300>)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80030d0 <HAL_GPIO_Init+0x320>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003004:	4a32      	ldr	r2, [pc, #200]	@ (80030d0 <HAL_GPIO_Init+0x320>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800300a:	4b31      	ldr	r3, [pc, #196]	@ (80030d0 <HAL_GPIO_Init+0x320>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800302e:	4a28      	ldr	r2, [pc, #160]	@ (80030d0 <HAL_GPIO_Init+0x320>)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003034:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <HAL_GPIO_Init+0x320>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003058:	4a1d      	ldr	r2, [pc, #116]	@ (80030d0 <HAL_GPIO_Init+0x320>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800305e:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <HAL_GPIO_Init+0x320>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003082:	4a13      	ldr	r2, [pc, #76]	@ (80030d0 <HAL_GPIO_Init+0x320>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	f47f ae91 	bne.w	8002dc0 <HAL_GPIO_Init+0x10>
  }
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40010000 	.word	0x40010000
 80030b4:	48000400 	.word	0x48000400
 80030b8:	48000800 	.word	0x48000800
 80030bc:	48000c00 	.word	0x48000c00
 80030c0:	48001000 	.word	0x48001000
 80030c4:	48001400 	.word	0x48001400
 80030c8:	48001800 	.word	0x48001800
 80030cc:	48001c00 	.word	0x48001c00
 80030d0:	40010400 	.word	0x40010400

080030d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030d8:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <HAL_PWREx_GetVoltageRange+0x18>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40007000 	.word	0x40007000

080030f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030fe:	d130      	bne.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003100:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800310c:	d038      	beq.n	8003180 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800310e:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003116:	4a1e      	ldr	r2, [pc, #120]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003118:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800311c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800311e:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2232      	movs	r2, #50	@ 0x32
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	4a1b      	ldr	r2, [pc, #108]	@ (8003198 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0c9b      	lsrs	r3, r3, #18
 8003130:	3301      	adds	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003134:	e002      	b.n	800313c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3b01      	subs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800313c:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003148:	d102      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x60>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f2      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003150:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315c:	d110      	bne.n	8003180 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e00f      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003162:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d007      	beq.n	8003180 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003170:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003178:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800317a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800317e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40007000 	.word	0x40007000
 8003194:	20000000 	.word	0x20000000
 8003198:	431bde83 	.word	0x431bde83

0800319c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a04      	ldr	r2, [pc, #16]	@ (80031b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80031a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031aa:	6053      	str	r3, [r2, #4]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40007000 	.word	0x40007000

080031bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f000 bc08 	b.w	80039e0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d0:	4b96      	ldr	r3, [pc, #600]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031da:	4b94      	ldr	r3, [pc, #592]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80e4 	beq.w	80033ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_RCC_OscConfig+0x4c>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	f040 808b 	bne.w	8003316 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b01      	cmp	r3, #1
 8003204:	f040 8087 	bne.w	8003316 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003208:	4b88      	ldr	r3, [pc, #544]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_OscConfig+0x64>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e3df      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	4b81      	ldr	r3, [pc, #516]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_RCC_OscConfig+0x7e>
 8003230:	4b7e      	ldr	r3, [pc, #504]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003238:	e005      	b.n	8003246 <HAL_RCC_OscConfig+0x8a>
 800323a:	4b7c      	ldr	r3, [pc, #496]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003246:	4293      	cmp	r3, r2
 8003248:	d223      	bcs.n	8003292 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fd92 	bl	8003d78 <RCC_SetFlashLatencyFromMSIRange>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e3c0      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800325e:	4b73      	ldr	r3, [pc, #460]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a72      	ldr	r2, [pc, #456]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b70      	ldr	r3, [pc, #448]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	496d      	ldr	r1, [pc, #436]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327c:	4b6b      	ldr	r3, [pc, #428]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	4968      	ldr	r1, [pc, #416]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
 8003290:	e025      	b.n	80032de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003292:	4b66      	ldr	r3, [pc, #408]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a65      	ldr	r2, [pc, #404]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003298:	f043 0308 	orr.w	r3, r3, #8
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b63      	ldr	r3, [pc, #396]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4960      	ldr	r1, [pc, #384]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b0:	4b5e      	ldr	r3, [pc, #376]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	495b      	ldr	r1, [pc, #364]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fd52 	bl	8003d78 <RCC_SetFlashLatencyFromMSIRange>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e380      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032de:	f000 fc87 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b51      	ldr	r3, [pc, #324]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	4950      	ldr	r1, [pc, #320]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a4e      	ldr	r2, [pc, #312]	@ (8003434 <HAL_RCC_OscConfig+0x278>)
 80032fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fd4a 	bl	8000d9c <HAL_InitTick>
 8003308:	4603      	mov	r3, r0
 800330a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d052      	beq.n	80033b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	e364      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d032      	beq.n	8003384 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800331e:	4b43      	ldr	r3, [pc, #268]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a42      	ldr	r2, [pc, #264]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800332a:	f7fd fd87 	bl	8000e3c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003332:	f7fd fd83 	bl	8000e3c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e34d      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003344:	4b39      	ldr	r3, [pc, #228]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a35      	ldr	r2, [pc, #212]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003356:	f043 0308 	orr.w	r3, r3, #8
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b33      	ldr	r3, [pc, #204]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4930      	ldr	r1, [pc, #192]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800336e:	4b2f      	ldr	r3, [pc, #188]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	492b      	ldr	r1, [pc, #172]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
 8003382:	e01a      	b.n	80033ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003384:	4b29      	ldr	r3, [pc, #164]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a28      	ldr	r2, [pc, #160]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003390:	f7fd fd54 	bl	8000e3c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003398:	f7fd fd50 	bl	8000e3c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e31a      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x1dc>
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d073      	beq.n	80034ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x21c>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d10e      	bne.n	80033f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	4b14      	ldr	r3, [pc, #80]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d063      	beq.n	80034ac <HAL_RCC_OscConfig+0x2f0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d15f      	bne.n	80034ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e2f7      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x24c>
 80033fa:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0b      	ldr	r2, [pc, #44]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e025      	b.n	8003454 <HAL_RCC_OscConfig+0x298>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003410:	d114      	bne.n	800343c <HAL_RCC_OscConfig+0x280>
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a05      	ldr	r2, [pc, #20]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a02      	ldr	r2, [pc, #8]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e013      	b.n	8003454 <HAL_RCC_OscConfig+0x298>
 800342c:	40021000 	.word	0x40021000
 8003430:	08005ca8 	.word	0x08005ca8
 8003434:	20000000 	.word	0x20000000
 8003438:	20000004 	.word	0x20000004
 800343c:	4ba0      	ldr	r3, [pc, #640]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a9f      	ldr	r2, [pc, #636]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b9d      	ldr	r3, [pc, #628]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a9c      	ldr	r2, [pc, #624]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800344e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd fcee 	bl	8000e3c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fd fcea 	bl	8000e3c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e2b4      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	4b92      	ldr	r3, [pc, #584]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x2a8>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fd fcda 	bl	8000e3c <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348c:	f7fd fcd6 	bl	8000e3c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	@ 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e2a0      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800349e:	4b88      	ldr	r3, [pc, #544]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x2d0>
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d060      	beq.n	800357c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d005      	beq.n	80034cc <HAL_RCC_OscConfig+0x310>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d119      	bne.n	80034fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d116      	bne.n	80034fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034cc:	4b7c      	ldr	r3, [pc, #496]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_OscConfig+0x328>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e27d      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b76      	ldr	r3, [pc, #472]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	4973      	ldr	r1, [pc, #460]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f8:	e040      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d023      	beq.n	800354a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003502:	4b6f      	ldr	r3, [pc, #444]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6e      	ldr	r2, [pc, #440]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fc95 	bl	8000e3c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fd fc91 	bl	8000e3c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e25b      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003528:	4b65      	ldr	r3, [pc, #404]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b62      	ldr	r3, [pc, #392]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	495f      	ldr	r1, [pc, #380]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
 8003548:	e018      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b5d      	ldr	r3, [pc, #372]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5c      	ldr	r2, [pc, #368]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fd fc71 	bl	8000e3c <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355e:	f7fd fc6d 	bl	8000e3c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e237      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003570:	4b53      	ldr	r3, [pc, #332]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03c      	beq.n	8003602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01c      	beq.n	80035ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003590:	4b4b      	ldr	r3, [pc, #300]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003596:	4a4a      	ldr	r2, [pc, #296]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd fc4c 	bl	8000e3c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd fc48 	bl	8000e3c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e212      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ba:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80035bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ef      	beq.n	80035a8 <HAL_RCC_OscConfig+0x3ec>
 80035c8:	e01b      	b.n	8003602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ca:	4b3d      	ldr	r3, [pc, #244]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80035cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d0:	4a3b      	ldr	r2, [pc, #236]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fd fc2f 	bl	8000e3c <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fd fc2b 	bl	8000e3c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e1f5      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f4:	4b32      	ldr	r3, [pc, #200]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80035f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ef      	bne.n	80035e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a6 	beq.w	800375c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003610:	2300      	movs	r3, #0
 8003612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003614:	4b2a      	ldr	r3, [pc, #168]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4b27      	ldr	r3, [pc, #156]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	4a26      	ldr	r2, [pc, #152]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362a:	6593      	str	r3, [r2, #88]	@ 0x58
 800362c:	4b24      	ldr	r3, [pc, #144]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363c:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <HAL_RCC_OscConfig+0x508>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d118      	bne.n	800367a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003648:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <HAL_RCC_OscConfig+0x508>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1d      	ldr	r2, [pc, #116]	@ (80036c4 <HAL_RCC_OscConfig+0x508>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003654:	f7fd fbf2 	bl	8000e3c <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fd fbee 	bl	8000e3c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1b8      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366e:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <HAL_RCC_OscConfig+0x508>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <HAL_RCC_OscConfig+0x4d8>
 8003682:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003688:	4a0d      	ldr	r2, [pc, #52]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003692:	e029      	b.n	80036e8 <HAL_RCC_OscConfig+0x52c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b05      	cmp	r3, #5
 800369a:	d115      	bne.n	80036c8 <HAL_RCC_OscConfig+0x50c>
 800369c:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	4a07      	ldr	r2, [pc, #28]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ac:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	4a03      	ldr	r2, [pc, #12]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x52c>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
 80036c8:	4b9d      	ldr	r3, [pc, #628]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	4a9c      	ldr	r2, [pc, #624]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036d8:	4b99      	ldr	r3, [pc, #612]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	4a98      	ldr	r2, [pc, #608]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d016      	beq.n	800371e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fba4 	bl	8000e3c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd fba0 	bl	8000e3c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e168      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370e:	4b8c      	ldr	r3, [pc, #560]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ed      	beq.n	80036f8 <HAL_RCC_OscConfig+0x53c>
 800371c:	e015      	b.n	800374a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fd fb8d 	bl	8000e3c <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003724:	e00a      	b.n	800373c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003726:	f7fd fb89 	bl	8000e3c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003734:	4293      	cmp	r3, r2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e151      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800373c:	4b80      	ldr	r3, [pc, #512]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1ed      	bne.n	8003726 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003750:	4b7b      	ldr	r3, [pc, #492]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003754:	4a7a      	ldr	r2, [pc, #488]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01c      	beq.n	80037aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003770:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003772:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003776:	4a72      	ldr	r2, [pc, #456]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fb5c 	bl	8000e3c <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003788:	f7fd fb58 	bl	8000e3c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e122      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379a:	4b69      	ldr	r3, [pc, #420]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 800379c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <HAL_RCC_OscConfig+0x5cc>
 80037a8:	e01b      	b.n	80037e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037aa:	4b65      	ldr	r3, [pc, #404]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80037ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037b0:	4a63      	ldr	r2, [pc, #396]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fd fb3f 	bl	8000e3c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c2:	f7fd fb3b 	bl	8000e3c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e105      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80037d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ef      	bne.n	80037c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80f9 	beq.w	80039de <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	f040 80cf 	bne.w	8003994 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037f6:	4b52      	ldr	r3, [pc, #328]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0203 	and.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	429a      	cmp	r2, r3
 8003808:	d12c      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	3b01      	subs	r3, #1
 8003816:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d123      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003826:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d11b      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003836:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d113      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	3b01      	subs	r3, #1
 800384a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d109      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	3b01      	subs	r3, #1
 800385e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d071      	beq.n	8003948 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d068      	beq.n	800393c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800386a:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003876:	4b32      	ldr	r3, [pc, #200]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0ac      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003886:	4b2e      	ldr	r3, [pc, #184]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2d      	ldr	r2, [pc, #180]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 800388c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003890:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003892:	f7fd fad3 	bl	8000e3c <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389a:	f7fd facf 	bl	8000e3c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e099      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ac:	4b24      	ldr	r3, [pc, #144]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b8:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <HAL_RCC_OscConfig+0x788>)
 80038be:	4013      	ands	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038c8:	3a01      	subs	r2, #1
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	4311      	orrs	r1, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038d2:	0212      	lsls	r2, r2, #8
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038da:	0852      	lsrs	r2, r2, #1
 80038dc:	3a01      	subs	r2, #1
 80038de:	0552      	lsls	r2, r2, #21
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038e6:	0852      	lsrs	r2, r2, #1
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0652      	lsls	r2, r2, #25
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038f2:	06d2      	lsls	r2, r2, #27
 80038f4:	430a      	orrs	r2, r1
 80038f6:	4912      	ldr	r1, [pc, #72]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038fc:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0f      	ldr	r2, [pc, #60]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003908:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a0c      	ldr	r2, [pc, #48]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003914:	f7fd fa92 	bl	8000e3c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fd fa8e 	bl	8000e3c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e058      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <HAL_RCC_OscConfig+0x784>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393a:	e050      	b.n	80039de <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04f      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
 8003940:	40021000 	.word	0x40021000
 8003944:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003948:	4b27      	ldr	r3, [pc, #156]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d144      	bne.n	80039de <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003954:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a23      	ldr	r2, [pc, #140]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003960:	4b21      	ldr	r3, [pc, #132]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a20      	ldr	r2, [pc, #128]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 8003966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800396a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800396c:	f7fd fa66 	bl	8000e3c <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fd fa62 	bl	8000e3c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e02c      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003986:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x7b8>
 8003992:	e024      	b.n	80039de <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d01f      	beq.n	80039da <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399a:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a12      	ldr	r2, [pc, #72]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 80039a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fd fa49 	bl	8000e3c <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fd fa45 	bl	8000e3c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e00f      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4905      	ldr	r1, [pc, #20]	@ (80039e8 <HAL_RCC_OscConfig+0x82c>)
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_RCC_OscConfig+0x830>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	60cb      	str	r3, [r1, #12]
 80039d8:	e001      	b.n	80039de <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	feeefffc 	.word	0xfeeefffc

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0e7      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b75      	ldr	r3, [pc, #468]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b72      	ldr	r3, [pc, #456]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4970      	ldr	r1, [pc, #448]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b6e      	ldr	r3, [pc, #440]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0cf      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d908      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b63      	ldr	r3, [pc, #396]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4960      	ldr	r1, [pc, #384]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04c      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a76:	4b5a      	ldr	r3, [pc, #360]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0a6      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8e:	4b54      	ldr	r3, [pc, #336]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e09a      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e08e      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e086      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b46      	ldr	r3, [pc, #280]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4943      	ldr	r1, [pc, #268]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fd f9b0 	bl	8000e3c <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd f9ac 	bl	8000e3c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e06e      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d010      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	4b31      	ldr	r3, [pc, #196]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d208      	bcs.n	8003b36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b24:	4b2e      	ldr	r3, [pc, #184]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	492b      	ldr	r1, [pc, #172]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b36:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d210      	bcs.n	8003b66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b44:	4b25      	ldr	r3, [pc, #148]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 0207 	bic.w	r2, r3, #7
 8003b4c:	4923      	ldr	r1, [pc, #140]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b54:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d001      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e036      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b72:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4918      	ldr	r1, [pc, #96]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4910      	ldr	r1, [pc, #64]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba4:	f000 f824 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	490b      	ldr	r1, [pc, #44]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f4>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	4a09      	ldr	r2, [pc, #36]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bc4:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <HAL_RCC_ClockConfig+0x1fc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fd f8e7 	bl	8000d9c <HAL_InitTick>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40021000 	.word	0x40021000
 8003be4:	08005ca8 	.word	0x08005ca8
 8003be8:	20000000 	.word	0x20000000
 8003bec:	20000004 	.word	0x20000004

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	@ 0x24
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c08:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x34>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d121      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d11e      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c24:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c30:	4b31      	ldr	r3, [pc, #196]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e005      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c40:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10d      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d102      	bne.n	8003c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c68:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	e004      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c74:	4b23      	ldr	r3, [pc, #140]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d134      	bne.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d003      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0xac>
 8003c94:	e005      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c98:	617b      	str	r3, [r7, #20]
      break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c9c:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c9e:	617b      	str	r3, [r7, #20]
      break;
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	617b      	str	r3, [r7, #20]
      break;
 8003ca6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cb6:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	fb03 f202 	mul.w	r2, r3, r2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	0e5b      	lsrs	r3, r3, #25
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	@ 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08005cc0 	.word	0x08005cc0
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	007a1200 	.word	0x007a1200

08003d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000000 	.word	0x20000000

08003d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d24:	f7ff fff0 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4904      	ldr	r1, [pc, #16]	@ (8003d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08005cb8 	.word	0x08005cb8

08003d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d50:	f7ff ffda 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0adb      	lsrs	r3, r3, #11
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	@ (8003d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08005cb8 	.word	0x08005cb8

08003d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d84:	4b2a      	ldr	r3, [pc, #168]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d90:	f7ff f9a0 	bl	80030d4 <HAL_PWREx_GetVoltageRange>
 8003d94:	6178      	str	r0, [r7, #20]
 8003d96:	e014      	b.n	8003dc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	4a24      	ldr	r2, [pc, #144]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da4:	4b22      	ldr	r3, [pc, #136]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003db0:	f7ff f990 	bl	80030d4 <HAL_PWREx_GetVoltageRange>
 8003db4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003db6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc8:	d10b      	bne.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b80      	cmp	r3, #128	@ 0x80
 8003dce:	d919      	bls.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003dd4:	d902      	bls.n	8003ddc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	e013      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ddc:	2301      	movs	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	e010      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b80      	cmp	r3, #128	@ 0x80
 8003de6:	d902      	bls.n	8003dee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003de8:	2303      	movs	r3, #3
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	e00a      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b80      	cmp	r3, #128	@ 0x80
 8003df2:	d102      	bne.n	8003dfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003df4:	2302      	movs	r3, #2
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e004      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b70      	cmp	r3, #112	@ 0x70
 8003dfe:	d101      	bne.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e00:	2301      	movs	r3, #1
 8003e02:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 0207 	bic.w	r2, r3, #7
 8003e0c:	4909      	ldr	r1, [pc, #36]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e14:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d001      	beq.n	8003e26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40022000 	.word	0x40022000

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e44:	2300      	movs	r3, #0
 8003e46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d041      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e5c:	d02a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e5e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e62:	d824      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e6e:	d81e      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e78:	d010      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e7a:	e018      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e7c:	4b86      	ldr	r3, [pc, #536]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a85      	ldr	r2, [pc, #532]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e88:	e015      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 facd 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e9a:	e00c      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3320      	adds	r3, #32
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fbb6 	bl	8004614 <RCCEx_PLLSAI2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	74fb      	strb	r3, [r7, #19]
      break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ebc:	4b76      	ldr	r3, [pc, #472]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eca:	4973      	ldr	r1, [pc, #460]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ed2:	e001      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d041      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ee8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eec:	d02a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ef2:	d824      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ef4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003efa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003efe:	d81e      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f08:	d010      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f0a:	e018      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f0c:	4b62      	ldr	r3, [pc, #392]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a61      	ldr	r2, [pc, #388]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f18:	e015      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fa85 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f2a:	e00c      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3320      	adds	r3, #32
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fb6e 	bl	8004614 <RCCEx_PLLSAI2_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	74fb      	strb	r3, [r7, #19]
      break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f46:	7cfb      	ldrb	r3, [r7, #19]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f4c:	4b52      	ldr	r3, [pc, #328]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5a:	494f      	ldr	r1, [pc, #316]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7cfb      	ldrb	r3, [r7, #19]
 8003f66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a0 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f90:	4b41      	ldr	r3, [pc, #260]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	4a40      	ldr	r2, [pc, #256]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fac:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb8:	f7fc ff40 	bl	8000e3c <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fbe:	e009      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fc ff3c 	bl	8000e3c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	74fb      	strb	r3, [r7, #19]
        break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd4:	4b31      	ldr	r3, [pc, #196]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ef      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d15c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	429a      	cmp	r2, r3
 8004002:	d019      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004004:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004010:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	4a20      	ldr	r2, [pc, #128]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004020:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	4a1c      	ldr	r2, [pc, #112]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004030:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fc fefb 	bl	8000e3c <HAL_GetTick>
 8004046:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004048:	e00b      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fc fef7 	bl	8000e3c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d902      	bls.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	74fb      	strb	r3, [r7, #19]
            break;
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004062:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ec      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004076:	4b08      	ldr	r3, [pc, #32]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	4904      	ldr	r1, [pc, #16]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a4:	7c7b      	ldrb	r3, [r7, #17]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4ba6      	ldr	r3, [pc, #664]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	4aa5      	ldr	r2, [pc, #660]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c2:	4ba0      	ldr	r3, [pc, #640]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f023 0203 	bic.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	499c      	ldr	r1, [pc, #624]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e4:	4b97      	ldr	r3, [pc, #604]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f023 020c 	bic.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f2:	4994      	ldr	r1, [pc, #592]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004106:	4b8f      	ldr	r3, [pc, #572]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	498b      	ldr	r1, [pc, #556]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004128:	4b86      	ldr	r3, [pc, #536]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004136:	4983      	ldr	r1, [pc, #524]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800414a:	4b7e      	ldr	r3, [pc, #504]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004158:	497a      	ldr	r1, [pc, #488]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800416c:	4b75      	ldr	r3, [pc, #468]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	4972      	ldr	r1, [pc, #456]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418e:	4b6d      	ldr	r3, [pc, #436]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419c:	4969      	ldr	r1, [pc, #420]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b0:	4b64      	ldr	r3, [pc, #400]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041be:	4961      	ldr	r1, [pc, #388]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	4958      	ldr	r1, [pc, #352]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f4:	4b53      	ldr	r3, [pc, #332]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	4950      	ldr	r1, [pc, #320]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004216:	4b4b      	ldr	r3, [pc, #300]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	4947      	ldr	r1, [pc, #284]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004238:	4b42      	ldr	r3, [pc, #264]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800423a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800423e:	f023 0203 	bic.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004246:	493f      	ldr	r1, [pc, #252]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d028      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800425a:	4b3a      	ldr	r3, [pc, #232]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004268:	4936      	ldr	r1, [pc, #216]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004278:	d106      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427a:	4b32      	ldr	r3, [pc, #200]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4a31      	ldr	r2, [pc, #196]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004280:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004284:	60d3      	str	r3, [r2, #12]
 8004286:	e011      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004290:	d10c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f8c9 	bl	8004430 <RCCEx_PLLSAI1_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d028      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042b8:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c6:	491f      	ldr	r1, [pc, #124]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042d6:	d106      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042e2:	60d3      	str	r3, [r2, #12]
 80042e4:	e011      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ee:	d10c      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f89a 	bl	8004430 <RCCEx_PLLSAI1_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d02a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004316:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004324:	4907      	ldr	r1, [pc, #28]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004334:	d108      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004336:	4b03      	ldr	r3, [pc, #12]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4a02      	ldr	r2, [pc, #8]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800433c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004340:	60d3      	str	r3, [r2, #12]
 8004342:	e013      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004344:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800434c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f869 	bl	8004430 <RCCEx_PLLSAI1_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004378:	4b2c      	ldr	r3, [pc, #176]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004386:	4929      	ldr	r1, [pc, #164]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004396:	d10d      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f846 	bl	8004430 <RCCEx_PLLSAI1_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d014      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	74bb      	strb	r3, [r7, #18]
 80043b2:	e011      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3320      	adds	r3, #32
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f925 	bl	8004614 <RCCEx_PLLSAI2_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f4:	490d      	ldr	r1, [pc, #52]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004408:	4b08      	ldr	r3, [pc, #32]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004418:	4904      	ldr	r1, [pc, #16]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004420:	7cbb      	ldrb	r3, [r7, #18]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443e:	4b74      	ldr	r3, [pc, #464]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800444a:	4b71      	ldr	r3, [pc, #452]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0203 	and.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d10d      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
       ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004462:	4b6b      	ldr	r3, [pc, #428]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
       ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d047      	beq.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	e044      	b.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d018      	beq.n	80044b6 <RCCEx_PLLSAI1_Config+0x86>
 8004484:	2b03      	cmp	r3, #3
 8004486:	d825      	bhi.n	80044d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004488:	2b01      	cmp	r3, #1
 800448a:	d002      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x62>
 800448c:	2b02      	cmp	r3, #2
 800448e:	d009      	beq.n	80044a4 <RCCEx_PLLSAI1_Config+0x74>
 8004490:	e020      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004492:	4b5f      	ldr	r3, [pc, #380]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11d      	bne.n	80044da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a2:	e01a      	b.n	80044da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b4:	e013      	b.n	80044de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044b6:	4b56      	ldr	r3, [pc, #344]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044c2:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044d2:	e006      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
      break;
 80044d8:	e004      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044da:	bf00      	nop
 80044dc:	e002      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044ea:	4b49      	ldr	r3, [pc, #292]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	430b      	orrs	r3, r1
 8004500:	4943      	ldr	r1, [pc, #268]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d17c      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800450c:	4b40      	ldr	r3, [pc, #256]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a3f      	ldr	r2, [pc, #252]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004512:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004518:	f7fc fc90 	bl	8000e3c <HAL_GetTick>
 800451c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800451e:	e009      	b.n	8004534 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004520:	f7fc fc8c 	bl	8000e3c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d902      	bls.n	8004534 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	73fb      	strb	r3, [r7, #15]
        break;
 8004532:	e005      	b.n	8004540 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004534:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ef      	bne.n	8004520 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d15f      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d110      	bne.n	800456e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800454c:	4b30      	ldr	r3, [pc, #192]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004554:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6892      	ldr	r2, [r2, #8]
 800455c:	0211      	lsls	r1, r2, #8
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	06d2      	lsls	r2, r2, #27
 8004564:	430a      	orrs	r2, r1
 8004566:	492a      	ldr	r1, [pc, #168]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]
 800456c:	e027      	b.n	80045be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d112      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004574:	4b26      	ldr	r3, [pc, #152]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800457c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6892      	ldr	r2, [r2, #8]
 8004584:	0211      	lsls	r1, r2, #8
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6912      	ldr	r2, [r2, #16]
 800458a:	0852      	lsrs	r2, r2, #1
 800458c:	3a01      	subs	r2, #1
 800458e:	0552      	lsls	r2, r2, #21
 8004590:	430a      	orrs	r2, r1
 8004592:	491f      	ldr	r1, [pc, #124]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	610b      	str	r3, [r1, #16]
 8004598:	e011      	b.n	80045be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459a:	4b1d      	ldr	r3, [pc, #116]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6892      	ldr	r2, [r2, #8]
 80045aa:	0211      	lsls	r1, r2, #8
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6952      	ldr	r2, [r2, #20]
 80045b0:	0852      	lsrs	r2, r2, #1
 80045b2:	3a01      	subs	r2, #1
 80045b4:	0652      	lsls	r2, r2, #25
 80045b6:	430a      	orrs	r2, r1
 80045b8:	4915      	ldr	r1, [pc, #84]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045be:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fc fc37 	bl	8000e3c <HAL_GetTick>
 80045ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d0:	e009      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d2:	f7fc fc33 	bl	8000e3c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d902      	bls.n	80045e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	73fb      	strb	r3, [r7, #15]
          break;
 80045e4:	e005      	b.n	80045f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ef      	beq.n	80045d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	4903      	ldr	r1, [pc, #12]	@ (8004610 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40021000 	.word	0x40021000

08004614 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004622:	4b69      	ldr	r3, [pc, #420]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d018      	beq.n	8004660 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800462e:	4b66      	ldr	r3, [pc, #408]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0203 	and.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d10d      	bne.n	800465a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
       ||
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004646:	4b60      	ldr	r3, [pc, #384]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
       ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d047      	beq.n	80046ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	e044      	b.n	80046ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d018      	beq.n	800469a <RCCEx_PLLSAI2_Config+0x86>
 8004668:	2b03      	cmp	r3, #3
 800466a:	d825      	bhi.n	80046b8 <RCCEx_PLLSAI2_Config+0xa4>
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <RCCEx_PLLSAI2_Config+0x62>
 8004670:	2b02      	cmp	r3, #2
 8004672:	d009      	beq.n	8004688 <RCCEx_PLLSAI2_Config+0x74>
 8004674:	e020      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004676:	4b54      	ldr	r3, [pc, #336]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d11d      	bne.n	80046be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004686:	e01a      	b.n	80046be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004688:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d116      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e013      	b.n	80046c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800469a:	4b4b      	ldr	r3, [pc, #300]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a6:	4b48      	ldr	r3, [pc, #288]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b6:	e006      	b.n	80046c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e004      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10d      	bne.n	80046ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ce:	4b3e      	ldr	r3, [pc, #248]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	430b      	orrs	r3, r1
 80046e4:	4938      	ldr	r1, [pc, #224]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d166      	bne.n	80047be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046f0:	4b35      	ldr	r3, [pc, #212]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a34      	ldr	r2, [pc, #208]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fc fb9e 	bl	8000e3c <HAL_GetTick>
 8004700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004702:	e009      	b.n	8004718 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004704:	f7fc fb9a 	bl	8000e3c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d902      	bls.n	8004718 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	73fb      	strb	r3, [r7, #15]
        break;
 8004716:	e005      	b.n	8004724 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004718:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ef      	bne.n	8004704 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d149      	bne.n	80047be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d110      	bne.n	8004752 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004738:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	0211      	lsls	r1, r2, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	06d2      	lsls	r2, r2, #27
 8004748:	430a      	orrs	r2, r1
 800474a:	491f      	ldr	r1, [pc, #124]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800474c:	4313      	orrs	r3, r2
 800474e:	614b      	str	r3, [r1, #20]
 8004750:	e011      	b.n	8004776 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004752:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800475a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	0211      	lsls	r1, r2, #8
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6912      	ldr	r2, [r2, #16]
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	3a01      	subs	r2, #1
 800476c:	0652      	lsls	r2, r2, #25
 800476e:	430a      	orrs	r2, r1
 8004770:	4915      	ldr	r1, [pc, #84]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004776:	4b14      	ldr	r3, [pc, #80]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a13      	ldr	r2, [pc, #76]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004780:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fc fb5b 	bl	8000e3c <HAL_GetTick>
 8004786:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004788:	e009      	b.n	800479e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800478a:	f7fc fb57 	bl	8000e3c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d902      	bls.n	800479e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	73fb      	strb	r3, [r7, #15]
          break;
 800479c:	e005      	b.n	80047aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800479e:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ef      	beq.n	800478a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	4903      	ldr	r1, [pc, #12]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047be:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000

080047cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e040      	b.n	8004860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc f9a6 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	@ 0x24
 80047f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fb6a 	bl	8004eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f8af 	bl	800497c <UART_SetConfig>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e01b      	b.n	8004860 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fbe9 	bl	8005030 <UART_CheckIdleState>
 800485e:	4603      	mov	r3, r0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	@ 0x28
 800486c:	af02      	add	r7, sp, #8
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800487c:	2b20      	cmp	r3, #32
 800487e:	d177      	bne.n	8004970 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_UART_Transmit+0x24>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e070      	b.n	8004972 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	@ 0x21
 800489c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800489e:	f7fc facd 	bl	8000e3c <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048bc:	d108      	bne.n	80048d0 <HAL_UART_Transmit+0x68>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e003      	b.n	80048d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d8:	e02f      	b.n	800493a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2180      	movs	r1, #128	@ 0x80
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fc4b 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e03b      	b.n	8004972 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	881a      	ldrh	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490c:	b292      	uxth	r2, r2
 800490e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	3302      	adds	r3, #2
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	e007      	b.n	8004928 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1c9      	bne.n	80048da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	2140      	movs	r1, #64	@ 0x40
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fc15 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e005      	b.n	8004972 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b08a      	sub	sp, #40	@ 0x28
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	431a      	orrs	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4ba4      	ldr	r3, [pc, #656]	@ (8004c3c <UART_SetConfig+0x2c0>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a99      	ldr	r2, [pc, #612]	@ (8004c40 <UART_SetConfig+0x2c4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	4313      	orrs	r3, r2
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a90      	ldr	r2, [pc, #576]	@ (8004c44 <UART_SetConfig+0x2c8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d126      	bne.n	8004a54 <UART_SetConfig+0xd8>
 8004a06:	4b90      	ldr	r3, [pc, #576]	@ (8004c48 <UART_SetConfig+0x2cc>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d81b      	bhi.n	8004a4c <UART_SetConfig+0xd0>
 8004a14:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <UART_SetConfig+0xa0>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a2d 	.word	0x08004a2d
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a45 	.word	0x08004a45
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a32:	e116      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004a34:	2302      	movs	r3, #2
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3a:	e112      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a42:	e10e      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004a44:	2308      	movs	r3, #8
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4a:	e10a      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a52:	e106      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a7c      	ldr	r2, [pc, #496]	@ (8004c4c <UART_SetConfig+0x2d0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d138      	bne.n	8004ad0 <UART_SetConfig+0x154>
 8004a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c48 <UART_SetConfig+0x2cc>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b0c      	cmp	r3, #12
 8004a6a:	d82d      	bhi.n	8004ac8 <UART_SetConfig+0x14c>
 8004a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a74 <UART_SetConfig+0xf8>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004ac9 	.word	0x08004ac9
 8004a7c:	08004ac9 	.word	0x08004ac9
 8004a80:	08004ac9 	.word	0x08004ac9
 8004a84:	08004ab9 	.word	0x08004ab9
 8004a88:	08004ac9 	.word	0x08004ac9
 8004a8c:	08004ac9 	.word	0x08004ac9
 8004a90:	08004ac9 	.word	0x08004ac9
 8004a94:	08004ab1 	.word	0x08004ab1
 8004a98:	08004ac9 	.word	0x08004ac9
 8004a9c:	08004ac9 	.word	0x08004ac9
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004ac1 	.word	0x08004ac1
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aae:	e0d8      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab6:	e0d4      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abe:	e0d0      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	e0cc      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ace:	e0c8      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c50 <UART_SetConfig+0x2d4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d125      	bne.n	8004b26 <UART_SetConfig+0x1aa>
 8004ada:	4b5b      	ldr	r3, [pc, #364]	@ (8004c48 <UART_SetConfig+0x2cc>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ae4:	2b30      	cmp	r3, #48	@ 0x30
 8004ae6:	d016      	beq.n	8004b16 <UART_SetConfig+0x19a>
 8004ae8:	2b30      	cmp	r3, #48	@ 0x30
 8004aea:	d818      	bhi.n	8004b1e <UART_SetConfig+0x1a2>
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d00a      	beq.n	8004b06 <UART_SetConfig+0x18a>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d814      	bhi.n	8004b1e <UART_SetConfig+0x1a2>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <UART_SetConfig+0x182>
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d008      	beq.n	8004b0e <UART_SetConfig+0x192>
 8004afc:	e00f      	b.n	8004b1e <UART_SetConfig+0x1a2>
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b04:	e0ad      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b06:	2302      	movs	r3, #2
 8004b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0c:	e0a9      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b0e:	2304      	movs	r3, #4
 8004b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b14:	e0a5      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b16:	2308      	movs	r3, #8
 8004b18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1c:	e0a1      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b1e:	2310      	movs	r3, #16
 8004b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b24:	e09d      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c54 <UART_SetConfig+0x2d8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d125      	bne.n	8004b7c <UART_SetConfig+0x200>
 8004b30:	4b45      	ldr	r3, [pc, #276]	@ (8004c48 <UART_SetConfig+0x2cc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b3c:	d016      	beq.n	8004b6c <UART_SetConfig+0x1f0>
 8004b3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b40:	d818      	bhi.n	8004b74 <UART_SetConfig+0x1f8>
 8004b42:	2b80      	cmp	r3, #128	@ 0x80
 8004b44:	d00a      	beq.n	8004b5c <UART_SetConfig+0x1e0>
 8004b46:	2b80      	cmp	r3, #128	@ 0x80
 8004b48:	d814      	bhi.n	8004b74 <UART_SetConfig+0x1f8>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <UART_SetConfig+0x1d8>
 8004b4e:	2b40      	cmp	r3, #64	@ 0x40
 8004b50:	d008      	beq.n	8004b64 <UART_SetConfig+0x1e8>
 8004b52:	e00f      	b.n	8004b74 <UART_SetConfig+0x1f8>
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5a:	e082      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b62:	e07e      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6a:	e07a      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b72:	e076      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7a:	e072      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a35      	ldr	r2, [pc, #212]	@ (8004c58 <UART_SetConfig+0x2dc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d12a      	bne.n	8004bdc <UART_SetConfig+0x260>
 8004b86:	4b30      	ldr	r3, [pc, #192]	@ (8004c48 <UART_SetConfig+0x2cc>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b94:	d01a      	beq.n	8004bcc <UART_SetConfig+0x250>
 8004b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b9a:	d81b      	bhi.n	8004bd4 <UART_SetConfig+0x258>
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba0:	d00c      	beq.n	8004bbc <UART_SetConfig+0x240>
 8004ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba6:	d815      	bhi.n	8004bd4 <UART_SetConfig+0x258>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <UART_SetConfig+0x238>
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb0:	d008      	beq.n	8004bc4 <UART_SetConfig+0x248>
 8004bb2:	e00f      	b.n	8004bd4 <UART_SetConfig+0x258>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bba:	e052      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc2:	e04e      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bca:	e04a      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd2:	e046      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bda:	e042      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a17      	ldr	r2, [pc, #92]	@ (8004c40 <UART_SetConfig+0x2c4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d13a      	bne.n	8004c5c <UART_SetConfig+0x2e0>
 8004be6:	4b18      	ldr	r3, [pc, #96]	@ (8004c48 <UART_SetConfig+0x2cc>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bf4:	d01a      	beq.n	8004c2c <UART_SetConfig+0x2b0>
 8004bf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bfa:	d81b      	bhi.n	8004c34 <UART_SetConfig+0x2b8>
 8004bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c00:	d00c      	beq.n	8004c1c <UART_SetConfig+0x2a0>
 8004c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c06:	d815      	bhi.n	8004c34 <UART_SetConfig+0x2b8>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <UART_SetConfig+0x298>
 8004c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c10:	d008      	beq.n	8004c24 <UART_SetConfig+0x2a8>
 8004c12:	e00f      	b.n	8004c34 <UART_SetConfig+0x2b8>
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e022      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c22:	e01e      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004c24:	2304      	movs	r3, #4
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2a:	e01a      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c32:	e016      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004c34:	2310      	movs	r3, #16
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3a:	e012      	b.n	8004c62 <UART_SetConfig+0x2e6>
 8004c3c:	efff69f3 	.word	0xefff69f3
 8004c40:	40008000 	.word	0x40008000
 8004c44:	40013800 	.word	0x40013800
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40004400 	.word	0x40004400
 8004c50:	40004800 	.word	0x40004800
 8004c54:	40004c00 	.word	0x40004c00
 8004c58:	40005000 	.word	0x40005000
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a9f      	ldr	r2, [pc, #636]	@ (8004ee4 <UART_SetConfig+0x568>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d17a      	bne.n	8004d62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d824      	bhi.n	8004cbe <UART_SetConfig+0x342>
 8004c74:	a201      	add	r2, pc, #4	@ (adr r2, 8004c7c <UART_SetConfig+0x300>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004cbf 	.word	0x08004cbf
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cbf 	.word	0x08004cbf
 8004c8c:	08004caf 	.word	0x08004caf
 8004c90:	08004cbf 	.word	0x08004cbf
 8004c94:	08004cbf 	.word	0x08004cbf
 8004c98:	08004cbf 	.word	0x08004cbf
 8004c9c:	08004cb7 	.word	0x08004cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7ff f83e 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	61f8      	str	r0, [r7, #28]
        break;
 8004ca6:	e010      	b.n	8004cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8004ee8 <UART_SetConfig+0x56c>)
 8004caa:	61fb      	str	r3, [r7, #28]
        break;
 8004cac:	e00d      	b.n	8004cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cae:	f7fe ff9f 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8004cb2:	61f8      	str	r0, [r7, #28]
        break;
 8004cb4:	e009      	b.n	8004cca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e005      	b.n	8004cca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80fb 	beq.w	8004ec8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4413      	add	r3, r2
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d305      	bcc.n	8004cee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d903      	bls.n	8004cf6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cf4:	e0e8      	b.n	8004ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	461c      	mov	r4, r3
 8004cfc:	4615      	mov	r5, r2
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	022b      	lsls	r3, r5, #8
 8004d08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d0c:	0222      	lsls	r2, r4, #8
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	6849      	ldr	r1, [r1, #4]
 8004d12:	0849      	lsrs	r1, r1, #1
 8004d14:	2000      	movs	r0, #0
 8004d16:	4688      	mov	r8, r1
 8004d18:	4681      	mov	r9, r0
 8004d1a:	eb12 0a08 	adds.w	sl, r2, r8
 8004d1e:	eb43 0b09 	adc.w	fp, r3, r9
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d30:	4650      	mov	r0, sl
 8004d32:	4659      	mov	r1, fp
 8004d34:	f7fb fab4 	bl	80002a0 <__aeabi_uldivmod>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d46:	d308      	bcc.n	8004d5a <UART_SetConfig+0x3de>
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d4e:	d204      	bcs.n	8004d5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	e0b6      	b.n	8004ec8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d60:	e0b2      	b.n	8004ec8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d6a:	d15e      	bne.n	8004e2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d828      	bhi.n	8004dc6 <UART_SetConfig+0x44a>
 8004d74:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <UART_SetConfig+0x400>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	08004dc7 	.word	0x08004dc7
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004dc7 	.word	0x08004dc7
 8004d94:	08004dc7 	.word	0x08004dc7
 8004d98:	08004dc7 	.word	0x08004dc7
 8004d9c:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da0:	f7fe ffbe 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 8004da4:	61f8      	str	r0, [r7, #28]
        break;
 8004da6:	e014      	b.n	8004dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da8:	f7fe ffd0 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 8004dac:	61f8      	str	r0, [r7, #28]
        break;
 8004dae:	e010      	b.n	8004dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ee8 <UART_SetConfig+0x56c>)
 8004db2:	61fb      	str	r3, [r7, #28]
        break;
 8004db4:	e00d      	b.n	8004dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fe ff1b 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8004dba:	61f8      	str	r0, [r7, #28]
        break;
 8004dbc:	e009      	b.n	8004dd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc2:	61fb      	str	r3, [r7, #28]
        break;
 8004dc4:	e005      	b.n	8004dd2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d077      	beq.n	8004ec8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	005a      	lsls	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	441a      	add	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b0f      	cmp	r3, #15
 8004df2:	d916      	bls.n	8004e22 <UART_SetConfig+0x4a6>
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfa:	d212      	bcs.n	8004e22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f023 030f 	bic.w	r3, r3, #15
 8004e04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	8afb      	ldrh	r3, [r7, #22]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	8afa      	ldrh	r2, [r7, #22]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e052      	b.n	8004ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e28:	e04e      	b.n	8004ec8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d827      	bhi.n	8004e82 <UART_SetConfig+0x506>
 8004e32:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <UART_SetConfig+0x4bc>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fe ff60 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 8004e60:	61f8      	str	r0, [r7, #28]
        break;
 8004e62:	e014      	b.n	8004e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fe ff72 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 8004e68:	61f8      	str	r0, [r7, #28]
        break;
 8004e6a:	e010      	b.n	8004e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee8 <UART_SetConfig+0x56c>)
 8004e6e:	61fb      	str	r3, [r7, #28]
        break;
 8004e70:	e00d      	b.n	8004e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fe febd 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8004e76:	61f8      	str	r0, [r7, #28]
        break;
 8004e78:	e009      	b.n	8004e8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e7e:	61fb      	str	r3, [r7, #28]
        break;
 8004e80:	e005      	b.n	8004e8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d019      	beq.n	8004ec8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	085a      	lsrs	r2, r3, #1
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	441a      	add	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d909      	bls.n	8004ec2 <UART_SetConfig+0x546>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb4:	d205      	bcs.n	8004ec2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60da      	str	r2, [r3, #12]
 8004ec0:	e002      	b.n	8004ec8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ed4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3728      	adds	r7, #40	@ 0x28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40008000 	.word	0x40008000
 8004ee8:	00f42400 	.word	0x00f42400

08004eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01a      	beq.n	8005002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fea:	d10a      	bne.n	8005002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
  }
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b098      	sub	sp, #96	@ 0x60
 8005034:	af02      	add	r7, sp, #8
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005040:	f7fb fefc 	bl	8000e3c <HAL_GetTick>
 8005044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b08      	cmp	r3, #8
 8005052:	d12e      	bne.n	80050b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505c:	2200      	movs	r2, #0
 800505e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f88c 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d021      	beq.n	80050b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800507c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005082:	653b      	str	r3, [r7, #80]	@ 0x50
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800508c:	647b      	str	r3, [r7, #68]	@ 0x44
 800508e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800509a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e6      	bne.n	800506e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e062      	b.n	8005178 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d149      	bne.n	8005154 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c8:	2200      	movs	r2, #0
 80050ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f856 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d03c      	beq.n	8005154 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	623b      	str	r3, [r7, #32]
   return(result);
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	60fb      	str	r3, [r7, #12]
   return(result);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512c:	61fa      	str	r2, [r7, #28]
 800512e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	69b9      	ldr	r1, [r7, #24]
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	617b      	str	r3, [r7, #20]
   return(result);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e5      	bne.n	800510c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e011      	b.n	8005178 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3758      	adds	r7, #88	@ 0x58
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005190:	e04f      	b.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d04b      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519a:	f7fb fe4f 	bl	8000e3c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e04e      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d037      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b80      	cmp	r3, #128	@ 0x80
 80051c6:	d034      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b40      	cmp	r3, #64	@ 0x40
 80051cc:	d031      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d110      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2208      	movs	r2, #8
 80051e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f838 	bl	800525a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2208      	movs	r2, #8
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e029      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800520c:	d111      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f81e 	bl	800525a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e00f      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4013      	ands	r3, r2
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	429a      	cmp	r2, r3
 800524e:	d0a0      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800525a:	b480      	push	{r7}
 800525c:	b095      	sub	sp, #84	@ 0x54
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005280:	643b      	str	r3, [r7, #64]	@ 0x40
 8005282:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005286:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e6      	bne.n	8005262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d118      	bne.n	8005302 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f023 0310 	bic.w	r3, r3, #16
 80052e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6979      	ldr	r1, [r7, #20]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	613b      	str	r3, [r7, #16]
   return(result);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e6      	bne.n	80052d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005316:	bf00      	nop
 8005318:	3754      	adds	r7, #84	@ 0x54
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <siprintf>:
 8005324:	b40e      	push	{r1, r2, r3}
 8005326:	b500      	push	{lr}
 8005328:	b09c      	sub	sp, #112	@ 0x70
 800532a:	ab1d      	add	r3, sp, #116	@ 0x74
 800532c:	9002      	str	r0, [sp, #8]
 800532e:	9006      	str	r0, [sp, #24]
 8005330:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005334:	4809      	ldr	r0, [pc, #36]	@ (800535c <siprintf+0x38>)
 8005336:	9107      	str	r1, [sp, #28]
 8005338:	9104      	str	r1, [sp, #16]
 800533a:	4909      	ldr	r1, [pc, #36]	@ (8005360 <siprintf+0x3c>)
 800533c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005340:	9105      	str	r1, [sp, #20]
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	a902      	add	r1, sp, #8
 8005348:	f000 f994 	bl	8005674 <_svfiprintf_r>
 800534c:	9b02      	ldr	r3, [sp, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	b01c      	add	sp, #112	@ 0x70
 8005354:	f85d eb04 	ldr.w	lr, [sp], #4
 8005358:	b003      	add	sp, #12
 800535a:	4770      	bx	lr
 800535c:	2000000c 	.word	0x2000000c
 8005360:	ffff0208 	.word	0xffff0208

08005364 <memset>:
 8005364:	4402      	add	r2, r0
 8005366:	4603      	mov	r3, r0
 8005368:	4293      	cmp	r3, r2
 800536a:	d100      	bne.n	800536e <memset+0xa>
 800536c:	4770      	bx	lr
 800536e:	f803 1b01 	strb.w	r1, [r3], #1
 8005372:	e7f9      	b.n	8005368 <memset+0x4>

08005374 <__errno>:
 8005374:	4b01      	ldr	r3, [pc, #4]	@ (800537c <__errno+0x8>)
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	2000000c 	.word	0x2000000c

08005380 <__libc_init_array>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4d0d      	ldr	r5, [pc, #52]	@ (80053b8 <__libc_init_array+0x38>)
 8005384:	4c0d      	ldr	r4, [pc, #52]	@ (80053bc <__libc_init_array+0x3c>)
 8005386:	1b64      	subs	r4, r4, r5
 8005388:	10a4      	asrs	r4, r4, #2
 800538a:	2600      	movs	r6, #0
 800538c:	42a6      	cmp	r6, r4
 800538e:	d109      	bne.n	80053a4 <__libc_init_array+0x24>
 8005390:	4d0b      	ldr	r5, [pc, #44]	@ (80053c0 <__libc_init_array+0x40>)
 8005392:	4c0c      	ldr	r4, [pc, #48]	@ (80053c4 <__libc_init_array+0x44>)
 8005394:	f000 fc66 	bl	8005c64 <_init>
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	2600      	movs	r6, #0
 800539e:	42a6      	cmp	r6, r4
 80053a0:	d105      	bne.n	80053ae <__libc_init_array+0x2e>
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a8:	4798      	blx	r3
 80053aa:	3601      	adds	r6, #1
 80053ac:	e7ee      	b.n	800538c <__libc_init_array+0xc>
 80053ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b2:	4798      	blx	r3
 80053b4:	3601      	adds	r6, #1
 80053b6:	e7f2      	b.n	800539e <__libc_init_array+0x1e>
 80053b8:	08005d2c 	.word	0x08005d2c
 80053bc:	08005d2c 	.word	0x08005d2c
 80053c0:	08005d2c 	.word	0x08005d2c
 80053c4:	08005d30 	.word	0x08005d30

080053c8 <__retarget_lock_acquire_recursive>:
 80053c8:	4770      	bx	lr

080053ca <__retarget_lock_release_recursive>:
 80053ca:	4770      	bx	lr

080053cc <_free_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4605      	mov	r5, r0
 80053d0:	2900      	cmp	r1, #0
 80053d2:	d041      	beq.n	8005458 <_free_r+0x8c>
 80053d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d8:	1f0c      	subs	r4, r1, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bfb8      	it	lt
 80053de:	18e4      	addlt	r4, r4, r3
 80053e0:	f000 f8e0 	bl	80055a4 <__malloc_lock>
 80053e4:	4a1d      	ldr	r2, [pc, #116]	@ (800545c <_free_r+0x90>)
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	b933      	cbnz	r3, 80053f8 <_free_r+0x2c>
 80053ea:	6063      	str	r3, [r4, #4]
 80053ec:	6014      	str	r4, [r2, #0]
 80053ee:	4628      	mov	r0, r5
 80053f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053f4:	f000 b8dc 	b.w	80055b0 <__malloc_unlock>
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	d908      	bls.n	800540e <_free_r+0x42>
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	1821      	adds	r1, r4, r0
 8005400:	428b      	cmp	r3, r1
 8005402:	bf01      	itttt	eq
 8005404:	6819      	ldreq	r1, [r3, #0]
 8005406:	685b      	ldreq	r3, [r3, #4]
 8005408:	1809      	addeq	r1, r1, r0
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	e7ed      	b.n	80053ea <_free_r+0x1e>
 800540e:	461a      	mov	r2, r3
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	b10b      	cbz	r3, 8005418 <_free_r+0x4c>
 8005414:	42a3      	cmp	r3, r4
 8005416:	d9fa      	bls.n	800540e <_free_r+0x42>
 8005418:	6811      	ldr	r1, [r2, #0]
 800541a:	1850      	adds	r0, r2, r1
 800541c:	42a0      	cmp	r0, r4
 800541e:	d10b      	bne.n	8005438 <_free_r+0x6c>
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	4401      	add	r1, r0
 8005424:	1850      	adds	r0, r2, r1
 8005426:	4283      	cmp	r3, r0
 8005428:	6011      	str	r1, [r2, #0]
 800542a:	d1e0      	bne.n	80053ee <_free_r+0x22>
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	6053      	str	r3, [r2, #4]
 8005432:	4408      	add	r0, r1
 8005434:	6010      	str	r0, [r2, #0]
 8005436:	e7da      	b.n	80053ee <_free_r+0x22>
 8005438:	d902      	bls.n	8005440 <_free_r+0x74>
 800543a:	230c      	movs	r3, #12
 800543c:	602b      	str	r3, [r5, #0]
 800543e:	e7d6      	b.n	80053ee <_free_r+0x22>
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	1821      	adds	r1, r4, r0
 8005444:	428b      	cmp	r3, r1
 8005446:	bf04      	itt	eq
 8005448:	6819      	ldreq	r1, [r3, #0]
 800544a:	685b      	ldreq	r3, [r3, #4]
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	bf04      	itt	eq
 8005450:	1809      	addeq	r1, r1, r0
 8005452:	6021      	streq	r1, [r4, #0]
 8005454:	6054      	str	r4, [r2, #4]
 8005456:	e7ca      	b.n	80053ee <_free_r+0x22>
 8005458:	bd38      	pop	{r3, r4, r5, pc}
 800545a:	bf00      	nop
 800545c:	20001ab0 	.word	0x20001ab0

08005460 <sbrk_aligned>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	4e0f      	ldr	r6, [pc, #60]	@ (80054a0 <sbrk_aligned+0x40>)
 8005464:	460c      	mov	r4, r1
 8005466:	6831      	ldr	r1, [r6, #0]
 8005468:	4605      	mov	r5, r0
 800546a:	b911      	cbnz	r1, 8005472 <sbrk_aligned+0x12>
 800546c:	f000 fba6 	bl	8005bbc <_sbrk_r>
 8005470:	6030      	str	r0, [r6, #0]
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f000 fba1 	bl	8005bbc <_sbrk_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	d103      	bne.n	8005486 <sbrk_aligned+0x26>
 800547e:	f04f 34ff 	mov.w	r4, #4294967295
 8005482:	4620      	mov	r0, r4
 8005484:	bd70      	pop	{r4, r5, r6, pc}
 8005486:	1cc4      	adds	r4, r0, #3
 8005488:	f024 0403 	bic.w	r4, r4, #3
 800548c:	42a0      	cmp	r0, r4
 800548e:	d0f8      	beq.n	8005482 <sbrk_aligned+0x22>
 8005490:	1a21      	subs	r1, r4, r0
 8005492:	4628      	mov	r0, r5
 8005494:	f000 fb92 	bl	8005bbc <_sbrk_r>
 8005498:	3001      	adds	r0, #1
 800549a:	d1f2      	bne.n	8005482 <sbrk_aligned+0x22>
 800549c:	e7ef      	b.n	800547e <sbrk_aligned+0x1e>
 800549e:	bf00      	nop
 80054a0:	20001aac 	.word	0x20001aac

080054a4 <_malloc_r>:
 80054a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a8:	1ccd      	adds	r5, r1, #3
 80054aa:	f025 0503 	bic.w	r5, r5, #3
 80054ae:	3508      	adds	r5, #8
 80054b0:	2d0c      	cmp	r5, #12
 80054b2:	bf38      	it	cc
 80054b4:	250c      	movcc	r5, #12
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	4606      	mov	r6, r0
 80054ba:	db01      	blt.n	80054c0 <_malloc_r+0x1c>
 80054bc:	42a9      	cmp	r1, r5
 80054be:	d904      	bls.n	80054ca <_malloc_r+0x26>
 80054c0:	230c      	movs	r3, #12
 80054c2:	6033      	str	r3, [r6, #0]
 80054c4:	2000      	movs	r0, #0
 80054c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055a0 <_malloc_r+0xfc>
 80054ce:	f000 f869 	bl	80055a4 <__malloc_lock>
 80054d2:	f8d8 3000 	ldr.w	r3, [r8]
 80054d6:	461c      	mov	r4, r3
 80054d8:	bb44      	cbnz	r4, 800552c <_malloc_r+0x88>
 80054da:	4629      	mov	r1, r5
 80054dc:	4630      	mov	r0, r6
 80054de:	f7ff ffbf 	bl	8005460 <sbrk_aligned>
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	4604      	mov	r4, r0
 80054e6:	d158      	bne.n	800559a <_malloc_r+0xf6>
 80054e8:	f8d8 4000 	ldr.w	r4, [r8]
 80054ec:	4627      	mov	r7, r4
 80054ee:	2f00      	cmp	r7, #0
 80054f0:	d143      	bne.n	800557a <_malloc_r+0xd6>
 80054f2:	2c00      	cmp	r4, #0
 80054f4:	d04b      	beq.n	800558e <_malloc_r+0xea>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	4639      	mov	r1, r7
 80054fa:	4630      	mov	r0, r6
 80054fc:	eb04 0903 	add.w	r9, r4, r3
 8005500:	f000 fb5c 	bl	8005bbc <_sbrk_r>
 8005504:	4581      	cmp	r9, r0
 8005506:	d142      	bne.n	800558e <_malloc_r+0xea>
 8005508:	6821      	ldr	r1, [r4, #0]
 800550a:	1a6d      	subs	r5, r5, r1
 800550c:	4629      	mov	r1, r5
 800550e:	4630      	mov	r0, r6
 8005510:	f7ff ffa6 	bl	8005460 <sbrk_aligned>
 8005514:	3001      	adds	r0, #1
 8005516:	d03a      	beq.n	800558e <_malloc_r+0xea>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	442b      	add	r3, r5
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	f8d8 3000 	ldr.w	r3, [r8]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	bb62      	cbnz	r2, 8005580 <_malloc_r+0xdc>
 8005526:	f8c8 7000 	str.w	r7, [r8]
 800552a:	e00f      	b.n	800554c <_malloc_r+0xa8>
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	1b52      	subs	r2, r2, r5
 8005530:	d420      	bmi.n	8005574 <_malloc_r+0xd0>
 8005532:	2a0b      	cmp	r2, #11
 8005534:	d917      	bls.n	8005566 <_malloc_r+0xc2>
 8005536:	1961      	adds	r1, r4, r5
 8005538:	42a3      	cmp	r3, r4
 800553a:	6025      	str	r5, [r4, #0]
 800553c:	bf18      	it	ne
 800553e:	6059      	strne	r1, [r3, #4]
 8005540:	6863      	ldr	r3, [r4, #4]
 8005542:	bf08      	it	eq
 8005544:	f8c8 1000 	streq.w	r1, [r8]
 8005548:	5162      	str	r2, [r4, r5]
 800554a:	604b      	str	r3, [r1, #4]
 800554c:	4630      	mov	r0, r6
 800554e:	f000 f82f 	bl	80055b0 <__malloc_unlock>
 8005552:	f104 000b 	add.w	r0, r4, #11
 8005556:	1d23      	adds	r3, r4, #4
 8005558:	f020 0007 	bic.w	r0, r0, #7
 800555c:	1ac2      	subs	r2, r0, r3
 800555e:	bf1c      	itt	ne
 8005560:	1a1b      	subne	r3, r3, r0
 8005562:	50a3      	strne	r3, [r4, r2]
 8005564:	e7af      	b.n	80054c6 <_malloc_r+0x22>
 8005566:	6862      	ldr	r2, [r4, #4]
 8005568:	42a3      	cmp	r3, r4
 800556a:	bf0c      	ite	eq
 800556c:	f8c8 2000 	streq.w	r2, [r8]
 8005570:	605a      	strne	r2, [r3, #4]
 8005572:	e7eb      	b.n	800554c <_malloc_r+0xa8>
 8005574:	4623      	mov	r3, r4
 8005576:	6864      	ldr	r4, [r4, #4]
 8005578:	e7ae      	b.n	80054d8 <_malloc_r+0x34>
 800557a:	463c      	mov	r4, r7
 800557c:	687f      	ldr	r7, [r7, #4]
 800557e:	e7b6      	b.n	80054ee <_malloc_r+0x4a>
 8005580:	461a      	mov	r2, r3
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	42a3      	cmp	r3, r4
 8005586:	d1fb      	bne.n	8005580 <_malloc_r+0xdc>
 8005588:	2300      	movs	r3, #0
 800558a:	6053      	str	r3, [r2, #4]
 800558c:	e7de      	b.n	800554c <_malloc_r+0xa8>
 800558e:	230c      	movs	r3, #12
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	4630      	mov	r0, r6
 8005594:	f000 f80c 	bl	80055b0 <__malloc_unlock>
 8005598:	e794      	b.n	80054c4 <_malloc_r+0x20>
 800559a:	6005      	str	r5, [r0, #0]
 800559c:	e7d6      	b.n	800554c <_malloc_r+0xa8>
 800559e:	bf00      	nop
 80055a0:	20001ab0 	.word	0x20001ab0

080055a4 <__malloc_lock>:
 80055a4:	4801      	ldr	r0, [pc, #4]	@ (80055ac <__malloc_lock+0x8>)
 80055a6:	f7ff bf0f 	b.w	80053c8 <__retarget_lock_acquire_recursive>
 80055aa:	bf00      	nop
 80055ac:	20001aa8 	.word	0x20001aa8

080055b0 <__malloc_unlock>:
 80055b0:	4801      	ldr	r0, [pc, #4]	@ (80055b8 <__malloc_unlock+0x8>)
 80055b2:	f7ff bf0a 	b.w	80053ca <__retarget_lock_release_recursive>
 80055b6:	bf00      	nop
 80055b8:	20001aa8 	.word	0x20001aa8

080055bc <__ssputs_r>:
 80055bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c0:	688e      	ldr	r6, [r1, #8]
 80055c2:	461f      	mov	r7, r3
 80055c4:	42be      	cmp	r6, r7
 80055c6:	680b      	ldr	r3, [r1, #0]
 80055c8:	4682      	mov	sl, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	4690      	mov	r8, r2
 80055ce:	d82d      	bhi.n	800562c <__ssputs_r+0x70>
 80055d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055d8:	d026      	beq.n	8005628 <__ssputs_r+0x6c>
 80055da:	6965      	ldr	r5, [r4, #20]
 80055dc:	6909      	ldr	r1, [r1, #16]
 80055de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055e2:	eba3 0901 	sub.w	r9, r3, r1
 80055e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055ea:	1c7b      	adds	r3, r7, #1
 80055ec:	444b      	add	r3, r9
 80055ee:	106d      	asrs	r5, r5, #1
 80055f0:	429d      	cmp	r5, r3
 80055f2:	bf38      	it	cc
 80055f4:	461d      	movcc	r5, r3
 80055f6:	0553      	lsls	r3, r2, #21
 80055f8:	d527      	bpl.n	800564a <__ssputs_r+0x8e>
 80055fa:	4629      	mov	r1, r5
 80055fc:	f7ff ff52 	bl	80054a4 <_malloc_r>
 8005600:	4606      	mov	r6, r0
 8005602:	b360      	cbz	r0, 800565e <__ssputs_r+0xa2>
 8005604:	6921      	ldr	r1, [r4, #16]
 8005606:	464a      	mov	r2, r9
 8005608:	f000 fae8 	bl	8005bdc <memcpy>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	6126      	str	r6, [r4, #16]
 800561a:	6165      	str	r5, [r4, #20]
 800561c:	444e      	add	r6, r9
 800561e:	eba5 0509 	sub.w	r5, r5, r9
 8005622:	6026      	str	r6, [r4, #0]
 8005624:	60a5      	str	r5, [r4, #8]
 8005626:	463e      	mov	r6, r7
 8005628:	42be      	cmp	r6, r7
 800562a:	d900      	bls.n	800562e <__ssputs_r+0x72>
 800562c:	463e      	mov	r6, r7
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	4632      	mov	r2, r6
 8005632:	4641      	mov	r1, r8
 8005634:	f000 faa8 	bl	8005b88 <memmove>
 8005638:	68a3      	ldr	r3, [r4, #8]
 800563a:	1b9b      	subs	r3, r3, r6
 800563c:	60a3      	str	r3, [r4, #8]
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	4433      	add	r3, r6
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	2000      	movs	r0, #0
 8005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564a:	462a      	mov	r2, r5
 800564c:	f000 fad4 	bl	8005bf8 <_realloc_r>
 8005650:	4606      	mov	r6, r0
 8005652:	2800      	cmp	r0, #0
 8005654:	d1e0      	bne.n	8005618 <__ssputs_r+0x5c>
 8005656:	6921      	ldr	r1, [r4, #16]
 8005658:	4650      	mov	r0, sl
 800565a:	f7ff feb7 	bl	80053cc <_free_r>
 800565e:	230c      	movs	r3, #12
 8005660:	f8ca 3000 	str.w	r3, [sl]
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	e7e9      	b.n	8005646 <__ssputs_r+0x8a>
	...

08005674 <_svfiprintf_r>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	4698      	mov	r8, r3
 800567a:	898b      	ldrh	r3, [r1, #12]
 800567c:	061b      	lsls	r3, r3, #24
 800567e:	b09d      	sub	sp, #116	@ 0x74
 8005680:	4607      	mov	r7, r0
 8005682:	460d      	mov	r5, r1
 8005684:	4614      	mov	r4, r2
 8005686:	d510      	bpl.n	80056aa <_svfiprintf_r+0x36>
 8005688:	690b      	ldr	r3, [r1, #16]
 800568a:	b973      	cbnz	r3, 80056aa <_svfiprintf_r+0x36>
 800568c:	2140      	movs	r1, #64	@ 0x40
 800568e:	f7ff ff09 	bl	80054a4 <_malloc_r>
 8005692:	6028      	str	r0, [r5, #0]
 8005694:	6128      	str	r0, [r5, #16]
 8005696:	b930      	cbnz	r0, 80056a6 <_svfiprintf_r+0x32>
 8005698:	230c      	movs	r3, #12
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	b01d      	add	sp, #116	@ 0x74
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	2340      	movs	r3, #64	@ 0x40
 80056a8:	616b      	str	r3, [r5, #20]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ae:	2320      	movs	r3, #32
 80056b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b8:	2330      	movs	r3, #48	@ 0x30
 80056ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005858 <_svfiprintf_r+0x1e4>
 80056be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056c2:	f04f 0901 	mov.w	r9, #1
 80056c6:	4623      	mov	r3, r4
 80056c8:	469a      	mov	sl, r3
 80056ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ce:	b10a      	cbz	r2, 80056d4 <_svfiprintf_r+0x60>
 80056d0:	2a25      	cmp	r2, #37	@ 0x25
 80056d2:	d1f9      	bne.n	80056c8 <_svfiprintf_r+0x54>
 80056d4:	ebba 0b04 	subs.w	fp, sl, r4
 80056d8:	d00b      	beq.n	80056f2 <_svfiprintf_r+0x7e>
 80056da:	465b      	mov	r3, fp
 80056dc:	4622      	mov	r2, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff ff6b 	bl	80055bc <__ssputs_r>
 80056e6:	3001      	adds	r0, #1
 80056e8:	f000 80a7 	beq.w	800583a <_svfiprintf_r+0x1c6>
 80056ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ee:	445a      	add	r2, fp
 80056f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80056f2:	f89a 3000 	ldrb.w	r3, [sl]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 809f 	beq.w	800583a <_svfiprintf_r+0x1c6>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005706:	f10a 0a01 	add.w	sl, sl, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	9307      	str	r3, [sp, #28]
 800570e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005712:	931a      	str	r3, [sp, #104]	@ 0x68
 8005714:	4654      	mov	r4, sl
 8005716:	2205      	movs	r2, #5
 8005718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571c:	484e      	ldr	r0, [pc, #312]	@ (8005858 <_svfiprintf_r+0x1e4>)
 800571e:	f7fa fd6f 	bl	8000200 <memchr>
 8005722:	9a04      	ldr	r2, [sp, #16]
 8005724:	b9d8      	cbnz	r0, 800575e <_svfiprintf_r+0xea>
 8005726:	06d0      	lsls	r0, r2, #27
 8005728:	bf44      	itt	mi
 800572a:	2320      	movmi	r3, #32
 800572c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005730:	0711      	lsls	r1, r2, #28
 8005732:	bf44      	itt	mi
 8005734:	232b      	movmi	r3, #43	@ 0x2b
 8005736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800573a:	f89a 3000 	ldrb.w	r3, [sl]
 800573e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005740:	d015      	beq.n	800576e <_svfiprintf_r+0xfa>
 8005742:	9a07      	ldr	r2, [sp, #28]
 8005744:	4654      	mov	r4, sl
 8005746:	2000      	movs	r0, #0
 8005748:	f04f 0c0a 	mov.w	ip, #10
 800574c:	4621      	mov	r1, r4
 800574e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005752:	3b30      	subs	r3, #48	@ 0x30
 8005754:	2b09      	cmp	r3, #9
 8005756:	d94b      	bls.n	80057f0 <_svfiprintf_r+0x17c>
 8005758:	b1b0      	cbz	r0, 8005788 <_svfiprintf_r+0x114>
 800575a:	9207      	str	r2, [sp, #28]
 800575c:	e014      	b.n	8005788 <_svfiprintf_r+0x114>
 800575e:	eba0 0308 	sub.w	r3, r0, r8
 8005762:	fa09 f303 	lsl.w	r3, r9, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	46a2      	mov	sl, r4
 800576c:	e7d2      	b.n	8005714 <_svfiprintf_r+0xa0>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	1d19      	adds	r1, r3, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	9103      	str	r1, [sp, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfbb      	ittet	lt
 800577a:	425b      	neglt	r3, r3
 800577c:	f042 0202 	orrlt.w	r2, r2, #2
 8005780:	9307      	strge	r3, [sp, #28]
 8005782:	9307      	strlt	r3, [sp, #28]
 8005784:	bfb8      	it	lt
 8005786:	9204      	strlt	r2, [sp, #16]
 8005788:	7823      	ldrb	r3, [r4, #0]
 800578a:	2b2e      	cmp	r3, #46	@ 0x2e
 800578c:	d10a      	bne.n	80057a4 <_svfiprintf_r+0x130>
 800578e:	7863      	ldrb	r3, [r4, #1]
 8005790:	2b2a      	cmp	r3, #42	@ 0x2a
 8005792:	d132      	bne.n	80057fa <_svfiprintf_r+0x186>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	9203      	str	r2, [sp, #12]
 800579c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057a0:	3402      	adds	r4, #2
 80057a2:	9305      	str	r3, [sp, #20]
 80057a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005868 <_svfiprintf_r+0x1f4>
 80057a8:	7821      	ldrb	r1, [r4, #0]
 80057aa:	2203      	movs	r2, #3
 80057ac:	4650      	mov	r0, sl
 80057ae:	f7fa fd27 	bl	8000200 <memchr>
 80057b2:	b138      	cbz	r0, 80057c4 <_svfiprintf_r+0x150>
 80057b4:	9b04      	ldr	r3, [sp, #16]
 80057b6:	eba0 000a 	sub.w	r0, r0, sl
 80057ba:	2240      	movs	r2, #64	@ 0x40
 80057bc:	4082      	lsls	r2, r0
 80057be:	4313      	orrs	r3, r2
 80057c0:	3401      	adds	r4, #1
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c8:	4824      	ldr	r0, [pc, #144]	@ (800585c <_svfiprintf_r+0x1e8>)
 80057ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057ce:	2206      	movs	r2, #6
 80057d0:	f7fa fd16 	bl	8000200 <memchr>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d036      	beq.n	8005846 <_svfiprintf_r+0x1d2>
 80057d8:	4b21      	ldr	r3, [pc, #132]	@ (8005860 <_svfiprintf_r+0x1ec>)
 80057da:	bb1b      	cbnz	r3, 8005824 <_svfiprintf_r+0x1b0>
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	3307      	adds	r3, #7
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	3308      	adds	r3, #8
 80057e6:	9303      	str	r3, [sp, #12]
 80057e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ea:	4433      	add	r3, r6
 80057ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ee:	e76a      	b.n	80056c6 <_svfiprintf_r+0x52>
 80057f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f4:	460c      	mov	r4, r1
 80057f6:	2001      	movs	r0, #1
 80057f8:	e7a8      	b.n	800574c <_svfiprintf_r+0xd8>
 80057fa:	2300      	movs	r3, #0
 80057fc:	3401      	adds	r4, #1
 80057fe:	9305      	str	r3, [sp, #20]
 8005800:	4619      	mov	r1, r3
 8005802:	f04f 0c0a 	mov.w	ip, #10
 8005806:	4620      	mov	r0, r4
 8005808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800580c:	3a30      	subs	r2, #48	@ 0x30
 800580e:	2a09      	cmp	r2, #9
 8005810:	d903      	bls.n	800581a <_svfiprintf_r+0x1a6>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0c6      	beq.n	80057a4 <_svfiprintf_r+0x130>
 8005816:	9105      	str	r1, [sp, #20]
 8005818:	e7c4      	b.n	80057a4 <_svfiprintf_r+0x130>
 800581a:	fb0c 2101 	mla	r1, ip, r1, r2
 800581e:	4604      	mov	r4, r0
 8005820:	2301      	movs	r3, #1
 8005822:	e7f0      	b.n	8005806 <_svfiprintf_r+0x192>
 8005824:	ab03      	add	r3, sp, #12
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	462a      	mov	r2, r5
 800582a:	4b0e      	ldr	r3, [pc, #56]	@ (8005864 <_svfiprintf_r+0x1f0>)
 800582c:	a904      	add	r1, sp, #16
 800582e:	4638      	mov	r0, r7
 8005830:	f3af 8000 	nop.w
 8005834:	1c42      	adds	r2, r0, #1
 8005836:	4606      	mov	r6, r0
 8005838:	d1d6      	bne.n	80057e8 <_svfiprintf_r+0x174>
 800583a:	89ab      	ldrh	r3, [r5, #12]
 800583c:	065b      	lsls	r3, r3, #25
 800583e:	f53f af2d 	bmi.w	800569c <_svfiprintf_r+0x28>
 8005842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005844:	e72c      	b.n	80056a0 <_svfiprintf_r+0x2c>
 8005846:	ab03      	add	r3, sp, #12
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	462a      	mov	r2, r5
 800584c:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <_svfiprintf_r+0x1f0>)
 800584e:	a904      	add	r1, sp, #16
 8005850:	4638      	mov	r0, r7
 8005852:	f000 f879 	bl	8005948 <_printf_i>
 8005856:	e7ed      	b.n	8005834 <_svfiprintf_r+0x1c0>
 8005858:	08005cf0 	.word	0x08005cf0
 800585c:	08005cfa 	.word	0x08005cfa
 8005860:	00000000 	.word	0x00000000
 8005864:	080055bd 	.word	0x080055bd
 8005868:	08005cf6 	.word	0x08005cf6

0800586c <_printf_common>:
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	4616      	mov	r6, r2
 8005872:	4698      	mov	r8, r3
 8005874:	688a      	ldr	r2, [r1, #8]
 8005876:	690b      	ldr	r3, [r1, #16]
 8005878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800587c:	4293      	cmp	r3, r2
 800587e:	bfb8      	it	lt
 8005880:	4613      	movlt	r3, r2
 8005882:	6033      	str	r3, [r6, #0]
 8005884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005888:	4607      	mov	r7, r0
 800588a:	460c      	mov	r4, r1
 800588c:	b10a      	cbz	r2, 8005892 <_printf_common+0x26>
 800588e:	3301      	adds	r3, #1
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	0699      	lsls	r1, r3, #26
 8005896:	bf42      	ittt	mi
 8005898:	6833      	ldrmi	r3, [r6, #0]
 800589a:	3302      	addmi	r3, #2
 800589c:	6033      	strmi	r3, [r6, #0]
 800589e:	6825      	ldr	r5, [r4, #0]
 80058a0:	f015 0506 	ands.w	r5, r5, #6
 80058a4:	d106      	bne.n	80058b4 <_printf_common+0x48>
 80058a6:	f104 0a19 	add.w	sl, r4, #25
 80058aa:	68e3      	ldr	r3, [r4, #12]
 80058ac:	6832      	ldr	r2, [r6, #0]
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	dc26      	bgt.n	8005902 <_printf_common+0x96>
 80058b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058b8:	6822      	ldr	r2, [r4, #0]
 80058ba:	3b00      	subs	r3, #0
 80058bc:	bf18      	it	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	0692      	lsls	r2, r2, #26
 80058c2:	d42b      	bmi.n	800591c <_printf_common+0xb0>
 80058c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058c8:	4641      	mov	r1, r8
 80058ca:	4638      	mov	r0, r7
 80058cc:	47c8      	blx	r9
 80058ce:	3001      	adds	r0, #1
 80058d0:	d01e      	beq.n	8005910 <_printf_common+0xa4>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	6922      	ldr	r2, [r4, #16]
 80058d6:	f003 0306 	and.w	r3, r3, #6
 80058da:	2b04      	cmp	r3, #4
 80058dc:	bf02      	ittt	eq
 80058de:	68e5      	ldreq	r5, [r4, #12]
 80058e0:	6833      	ldreq	r3, [r6, #0]
 80058e2:	1aed      	subeq	r5, r5, r3
 80058e4:	68a3      	ldr	r3, [r4, #8]
 80058e6:	bf0c      	ite	eq
 80058e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058ec:	2500      	movne	r5, #0
 80058ee:	4293      	cmp	r3, r2
 80058f0:	bfc4      	itt	gt
 80058f2:	1a9b      	subgt	r3, r3, r2
 80058f4:	18ed      	addgt	r5, r5, r3
 80058f6:	2600      	movs	r6, #0
 80058f8:	341a      	adds	r4, #26
 80058fa:	42b5      	cmp	r5, r6
 80058fc:	d11a      	bne.n	8005934 <_printf_common+0xc8>
 80058fe:	2000      	movs	r0, #0
 8005900:	e008      	b.n	8005914 <_printf_common+0xa8>
 8005902:	2301      	movs	r3, #1
 8005904:	4652      	mov	r2, sl
 8005906:	4641      	mov	r1, r8
 8005908:	4638      	mov	r0, r7
 800590a:	47c8      	blx	r9
 800590c:	3001      	adds	r0, #1
 800590e:	d103      	bne.n	8005918 <_printf_common+0xac>
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005918:	3501      	adds	r5, #1
 800591a:	e7c6      	b.n	80058aa <_printf_common+0x3e>
 800591c:	18e1      	adds	r1, r4, r3
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	2030      	movs	r0, #48	@ 0x30
 8005922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005926:	4422      	add	r2, r4
 8005928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800592c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005930:	3302      	adds	r3, #2
 8005932:	e7c7      	b.n	80058c4 <_printf_common+0x58>
 8005934:	2301      	movs	r3, #1
 8005936:	4622      	mov	r2, r4
 8005938:	4641      	mov	r1, r8
 800593a:	4638      	mov	r0, r7
 800593c:	47c8      	blx	r9
 800593e:	3001      	adds	r0, #1
 8005940:	d0e6      	beq.n	8005910 <_printf_common+0xa4>
 8005942:	3601      	adds	r6, #1
 8005944:	e7d9      	b.n	80058fa <_printf_common+0x8e>
	...

08005948 <_printf_i>:
 8005948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	7e0f      	ldrb	r7, [r1, #24]
 800594e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005950:	2f78      	cmp	r7, #120	@ 0x78
 8005952:	4691      	mov	r9, r2
 8005954:	4680      	mov	r8, r0
 8005956:	460c      	mov	r4, r1
 8005958:	469a      	mov	sl, r3
 800595a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800595e:	d807      	bhi.n	8005970 <_printf_i+0x28>
 8005960:	2f62      	cmp	r7, #98	@ 0x62
 8005962:	d80a      	bhi.n	800597a <_printf_i+0x32>
 8005964:	2f00      	cmp	r7, #0
 8005966:	f000 80d2 	beq.w	8005b0e <_printf_i+0x1c6>
 800596a:	2f58      	cmp	r7, #88	@ 0x58
 800596c:	f000 80b9 	beq.w	8005ae2 <_printf_i+0x19a>
 8005970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005978:	e03a      	b.n	80059f0 <_printf_i+0xa8>
 800597a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800597e:	2b15      	cmp	r3, #21
 8005980:	d8f6      	bhi.n	8005970 <_printf_i+0x28>
 8005982:	a101      	add	r1, pc, #4	@ (adr r1, 8005988 <_printf_i+0x40>)
 8005984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005988:	080059e1 	.word	0x080059e1
 800598c:	080059f5 	.word	0x080059f5
 8005990:	08005971 	.word	0x08005971
 8005994:	08005971 	.word	0x08005971
 8005998:	08005971 	.word	0x08005971
 800599c:	08005971 	.word	0x08005971
 80059a0:	080059f5 	.word	0x080059f5
 80059a4:	08005971 	.word	0x08005971
 80059a8:	08005971 	.word	0x08005971
 80059ac:	08005971 	.word	0x08005971
 80059b0:	08005971 	.word	0x08005971
 80059b4:	08005af5 	.word	0x08005af5
 80059b8:	08005a1f 	.word	0x08005a1f
 80059bc:	08005aaf 	.word	0x08005aaf
 80059c0:	08005971 	.word	0x08005971
 80059c4:	08005971 	.word	0x08005971
 80059c8:	08005b17 	.word	0x08005b17
 80059cc:	08005971 	.word	0x08005971
 80059d0:	08005a1f 	.word	0x08005a1f
 80059d4:	08005971 	.word	0x08005971
 80059d8:	08005971 	.word	0x08005971
 80059dc:	08005ab7 	.word	0x08005ab7
 80059e0:	6833      	ldr	r3, [r6, #0]
 80059e2:	1d1a      	adds	r2, r3, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6032      	str	r2, [r6, #0]
 80059e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059f0:	2301      	movs	r3, #1
 80059f2:	e09d      	b.n	8005b30 <_printf_i+0x1e8>
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	6820      	ldr	r0, [r4, #0]
 80059f8:	1d19      	adds	r1, r3, #4
 80059fa:	6031      	str	r1, [r6, #0]
 80059fc:	0606      	lsls	r6, r0, #24
 80059fe:	d501      	bpl.n	8005a04 <_printf_i+0xbc>
 8005a00:	681d      	ldr	r5, [r3, #0]
 8005a02:	e003      	b.n	8005a0c <_printf_i+0xc4>
 8005a04:	0645      	lsls	r5, r0, #25
 8005a06:	d5fb      	bpl.n	8005a00 <_printf_i+0xb8>
 8005a08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a0c:	2d00      	cmp	r5, #0
 8005a0e:	da03      	bge.n	8005a18 <_printf_i+0xd0>
 8005a10:	232d      	movs	r3, #45	@ 0x2d
 8005a12:	426d      	negs	r5, r5
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a18:	4859      	ldr	r0, [pc, #356]	@ (8005b80 <_printf_i+0x238>)
 8005a1a:	230a      	movs	r3, #10
 8005a1c:	e011      	b.n	8005a42 <_printf_i+0xfa>
 8005a1e:	6821      	ldr	r1, [r4, #0]
 8005a20:	6833      	ldr	r3, [r6, #0]
 8005a22:	0608      	lsls	r0, r1, #24
 8005a24:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a28:	d402      	bmi.n	8005a30 <_printf_i+0xe8>
 8005a2a:	0649      	lsls	r1, r1, #25
 8005a2c:	bf48      	it	mi
 8005a2e:	b2ad      	uxthmi	r5, r5
 8005a30:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a32:	4853      	ldr	r0, [pc, #332]	@ (8005b80 <_printf_i+0x238>)
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	bf14      	ite	ne
 8005a38:	230a      	movne	r3, #10
 8005a3a:	2308      	moveq	r3, #8
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a42:	6866      	ldr	r6, [r4, #4]
 8005a44:	60a6      	str	r6, [r4, #8]
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	bfa2      	ittt	ge
 8005a4a:	6821      	ldrge	r1, [r4, #0]
 8005a4c:	f021 0104 	bicge.w	r1, r1, #4
 8005a50:	6021      	strge	r1, [r4, #0]
 8005a52:	b90d      	cbnz	r5, 8005a58 <_printf_i+0x110>
 8005a54:	2e00      	cmp	r6, #0
 8005a56:	d04b      	beq.n	8005af0 <_printf_i+0x1a8>
 8005a58:	4616      	mov	r6, r2
 8005a5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a5e:	fb03 5711 	mls	r7, r3, r1, r5
 8005a62:	5dc7      	ldrb	r7, [r0, r7]
 8005a64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a68:	462f      	mov	r7, r5
 8005a6a:	42bb      	cmp	r3, r7
 8005a6c:	460d      	mov	r5, r1
 8005a6e:	d9f4      	bls.n	8005a5a <_printf_i+0x112>
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d10b      	bne.n	8005a8c <_printf_i+0x144>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	07df      	lsls	r7, r3, #31
 8005a78:	d508      	bpl.n	8005a8c <_printf_i+0x144>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	6861      	ldr	r1, [r4, #4]
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	bfde      	ittt	le
 8005a82:	2330      	movle	r3, #48	@ 0x30
 8005a84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a8c:	1b92      	subs	r2, r2, r6
 8005a8e:	6122      	str	r2, [r4, #16]
 8005a90:	f8cd a000 	str.w	sl, [sp]
 8005a94:	464b      	mov	r3, r9
 8005a96:	aa03      	add	r2, sp, #12
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	f7ff fee6 	bl	800586c <_printf_common>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d14a      	bne.n	8005b3a <_printf_i+0x1f2>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	b004      	add	sp, #16
 8005aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	f043 0320 	orr.w	r3, r3, #32
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	4833      	ldr	r0, [pc, #204]	@ (8005b84 <_printf_i+0x23c>)
 8005ab8:	2778      	movs	r7, #120	@ 0x78
 8005aba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	6831      	ldr	r1, [r6, #0]
 8005ac2:	061f      	lsls	r7, r3, #24
 8005ac4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ac8:	d402      	bmi.n	8005ad0 <_printf_i+0x188>
 8005aca:	065f      	lsls	r7, r3, #25
 8005acc:	bf48      	it	mi
 8005ace:	b2ad      	uxthmi	r5, r5
 8005ad0:	6031      	str	r1, [r6, #0]
 8005ad2:	07d9      	lsls	r1, r3, #31
 8005ad4:	bf44      	itt	mi
 8005ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8005ada:	6023      	strmi	r3, [r4, #0]
 8005adc:	b11d      	cbz	r5, 8005ae6 <_printf_i+0x19e>
 8005ade:	2310      	movs	r3, #16
 8005ae0:	e7ac      	b.n	8005a3c <_printf_i+0xf4>
 8005ae2:	4827      	ldr	r0, [pc, #156]	@ (8005b80 <_printf_i+0x238>)
 8005ae4:	e7e9      	b.n	8005aba <_printf_i+0x172>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	f023 0320 	bic.w	r3, r3, #32
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	e7f6      	b.n	8005ade <_printf_i+0x196>
 8005af0:	4616      	mov	r6, r2
 8005af2:	e7bd      	b.n	8005a70 <_printf_i+0x128>
 8005af4:	6833      	ldr	r3, [r6, #0]
 8005af6:	6825      	ldr	r5, [r4, #0]
 8005af8:	6961      	ldr	r1, [r4, #20]
 8005afa:	1d18      	adds	r0, r3, #4
 8005afc:	6030      	str	r0, [r6, #0]
 8005afe:	062e      	lsls	r6, r5, #24
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	d501      	bpl.n	8005b08 <_printf_i+0x1c0>
 8005b04:	6019      	str	r1, [r3, #0]
 8005b06:	e002      	b.n	8005b0e <_printf_i+0x1c6>
 8005b08:	0668      	lsls	r0, r5, #25
 8005b0a:	d5fb      	bpl.n	8005b04 <_printf_i+0x1bc>
 8005b0c:	8019      	strh	r1, [r3, #0]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	4616      	mov	r6, r2
 8005b14:	e7bc      	b.n	8005a90 <_printf_i+0x148>
 8005b16:	6833      	ldr	r3, [r6, #0]
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	6032      	str	r2, [r6, #0]
 8005b1c:	681e      	ldr	r6, [r3, #0]
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	2100      	movs	r1, #0
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7fa fb6c 	bl	8000200 <memchr>
 8005b28:	b108      	cbz	r0, 8005b2e <_printf_i+0x1e6>
 8005b2a:	1b80      	subs	r0, r0, r6
 8005b2c:	6060      	str	r0, [r4, #4]
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	2300      	movs	r3, #0
 8005b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b38:	e7aa      	b.n	8005a90 <_printf_i+0x148>
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4640      	mov	r0, r8
 8005b42:	47d0      	blx	sl
 8005b44:	3001      	adds	r0, #1
 8005b46:	d0ad      	beq.n	8005aa4 <_printf_i+0x15c>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	079b      	lsls	r3, r3, #30
 8005b4c:	d413      	bmi.n	8005b76 <_printf_i+0x22e>
 8005b4e:	68e0      	ldr	r0, [r4, #12]
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	4298      	cmp	r0, r3
 8005b54:	bfb8      	it	lt
 8005b56:	4618      	movlt	r0, r3
 8005b58:	e7a6      	b.n	8005aa8 <_printf_i+0x160>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4640      	mov	r0, r8
 8005b62:	47d0      	blx	sl
 8005b64:	3001      	adds	r0, #1
 8005b66:	d09d      	beq.n	8005aa4 <_printf_i+0x15c>
 8005b68:	3501      	adds	r5, #1
 8005b6a:	68e3      	ldr	r3, [r4, #12]
 8005b6c:	9903      	ldr	r1, [sp, #12]
 8005b6e:	1a5b      	subs	r3, r3, r1
 8005b70:	42ab      	cmp	r3, r5
 8005b72:	dcf2      	bgt.n	8005b5a <_printf_i+0x212>
 8005b74:	e7eb      	b.n	8005b4e <_printf_i+0x206>
 8005b76:	2500      	movs	r5, #0
 8005b78:	f104 0619 	add.w	r6, r4, #25
 8005b7c:	e7f5      	b.n	8005b6a <_printf_i+0x222>
 8005b7e:	bf00      	nop
 8005b80:	08005d01 	.word	0x08005d01
 8005b84:	08005d12 	.word	0x08005d12

08005b88 <memmove>:
 8005b88:	4288      	cmp	r0, r1
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	eb01 0402 	add.w	r4, r1, r2
 8005b90:	d902      	bls.n	8005b98 <memmove+0x10>
 8005b92:	4284      	cmp	r4, r0
 8005b94:	4623      	mov	r3, r4
 8005b96:	d807      	bhi.n	8005ba8 <memmove+0x20>
 8005b98:	1e43      	subs	r3, r0, #1
 8005b9a:	42a1      	cmp	r1, r4
 8005b9c:	d008      	beq.n	8005bb0 <memmove+0x28>
 8005b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ba6:	e7f8      	b.n	8005b9a <memmove+0x12>
 8005ba8:	4402      	add	r2, r0
 8005baa:	4601      	mov	r1, r0
 8005bac:	428a      	cmp	r2, r1
 8005bae:	d100      	bne.n	8005bb2 <memmove+0x2a>
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bba:	e7f7      	b.n	8005bac <memmove+0x24>

08005bbc <_sbrk_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4d06      	ldr	r5, [pc, #24]	@ (8005bd8 <_sbrk_r+0x1c>)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fb f85e 	bl	8000c88 <_sbrk>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_sbrk_r+0x1a>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_sbrk_r+0x1a>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20001aa4 	.word	0x20001aa4

08005bdc <memcpy>:
 8005bdc:	440a      	add	r2, r1
 8005bde:	4291      	cmp	r1, r2
 8005be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be4:	d100      	bne.n	8005be8 <memcpy+0xc>
 8005be6:	4770      	bx	lr
 8005be8:	b510      	push	{r4, lr}
 8005bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	d1f9      	bne.n	8005bea <memcpy+0xe>
 8005bf6:	bd10      	pop	{r4, pc}

08005bf8 <_realloc_r>:
 8005bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	4615      	mov	r5, r2
 8005c00:	460c      	mov	r4, r1
 8005c02:	b921      	cbnz	r1, 8005c0e <_realloc_r+0x16>
 8005c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c08:	4611      	mov	r1, r2
 8005c0a:	f7ff bc4b 	b.w	80054a4 <_malloc_r>
 8005c0e:	b92a      	cbnz	r2, 8005c1c <_realloc_r+0x24>
 8005c10:	f7ff fbdc 	bl	80053cc <_free_r>
 8005c14:	2400      	movs	r4, #0
 8005c16:	4620      	mov	r0, r4
 8005c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c1c:	f000 f81a 	bl	8005c54 <_malloc_usable_size_r>
 8005c20:	4285      	cmp	r5, r0
 8005c22:	4606      	mov	r6, r0
 8005c24:	d802      	bhi.n	8005c2c <_realloc_r+0x34>
 8005c26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c2a:	d8f4      	bhi.n	8005c16 <_realloc_r+0x1e>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4640      	mov	r0, r8
 8005c30:	f7ff fc38 	bl	80054a4 <_malloc_r>
 8005c34:	4607      	mov	r7, r0
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0ec      	beq.n	8005c14 <_realloc_r+0x1c>
 8005c3a:	42b5      	cmp	r5, r6
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	4621      	mov	r1, r4
 8005c40:	bf28      	it	cs
 8005c42:	4632      	movcs	r2, r6
 8005c44:	f7ff ffca 	bl	8005bdc <memcpy>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	f7ff fbbe 	bl	80053cc <_free_r>
 8005c50:	463c      	mov	r4, r7
 8005c52:	e7e0      	b.n	8005c16 <_realloc_r+0x1e>

08005c54 <_malloc_usable_size_r>:
 8005c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c58:	1f18      	subs	r0, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bfbc      	itt	lt
 8005c5e:	580b      	ldrlt	r3, [r1, r0]
 8005c60:	18c0      	addlt	r0, r0, r3
 8005c62:	4770      	bx	lr

08005c64 <_init>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr

08005c70 <_fini>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr
